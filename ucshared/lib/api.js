/**
 * UCMidtier
 * java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i http://localhost:8082/swagger/docs/v1 -l typescript-fetch -o C:\Users\ucadmin\Documents\uc_shared\src
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var querystring = require("querystring");
var url = require("url");
require("portable-fetch");
//import * as assign from "core-js/library/fn/object/assign";
var assign = require('object-assign');
var isomorphicFetch = fetch;
exports.BASE_PATH = (!process.env.BROWSER) ? ((process.env && process.env.BASE_PATH) || 'https://www.undergroundcellar.com') : '';
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = exports.BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * AccessLogApi - fetch parameter creator
 */
exports.AccessLogApiFetchParamCreator = {
    /**
     * @param lead
     */
    accessLogLog: function (params, options) {
        // verify required parameter "lead" is set
        if (params["lead"] == null) {
            throw new Error("Missing required parameter lead when calling accessLogLog");
        }
        var baseUrl = "/api/access/log";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["lead"]) {
            fetchOptions.body = JSON.stringify(params["lead"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param lead
     */
    accessLogPostLead: function (params, options) {
        // verify required parameter "lead" is set
        if (params["lead"] == null) {
            throw new Error("Missing required parameter lead when calling accessLogPostLead");
        }
        var baseUrl = "/api/access/lead";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["lead"]) {
            fetchOptions.body = JSON.stringify(params["lead"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AccessLogApi - functional programming interface
 */
exports.AccessLogApiFp = {
    /**
     * @param lead
     */
    accessLogLog: function (params, options) {
        var fetchArgs = exports.AccessLogApiFetchParamCreator.accessLogLog(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param lead
     */
    accessLogPostLead: function (params, options) {
        var fetchArgs = exports.AccessLogApiFetchParamCreator.accessLogPostLead(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AccessLogApi - object-oriented interface
 */
var AccessLogApi = (function (_super) {
    __extends(AccessLogApi, _super);
    function AccessLogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param lead
     */
    AccessLogApi.prototype.accessLogLog = function (params, options) {
        return exports.AccessLogApiFp.accessLogLog(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param lead
     */
    AccessLogApi.prototype.accessLogPostLead = function (params, options) {
        return exports.AccessLogApiFp.accessLogPostLead(params, options)(this.fetch, this.basePath);
    };
    return AccessLogApi;
}(BaseAPI));
exports.AccessLogApi = AccessLogApi;
;
/**
 * AccessLogApi - factory interface
 */
exports.AccessLogApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param lead
         */
        accessLogLog: function (params, options) {
            return exports.AccessLogApiFp.accessLogLog(params, options)(fetch, basePath);
        },
        /**
         * @param lead
         */
        accessLogPostLead: function (params, options) {
            return exports.AccessLogApiFp.accessLogPostLead(params, options)(fetch, basePath);
        },
    };
};
/**
 * AchievementApi - fetch parameter creator
 */
exports.AchievementApiFetchParamCreator = {
    /**
     * @param userId
     */
    achievementGetAchievementForUser: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling achievementGetAchievementForUser");
        }
        var baseUrl = "/api/contest/{userId}/achievements"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userId
     */
    achievementGetLeaderboardForUser: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling achievementGetLeaderboardForUser");
        }
        var baseUrl = "/api/contest/{userId}/leaderboard"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AchievementApi - functional programming interface
 */
exports.AchievementApiFp = {
    /**
     * @param userId
     */
    achievementGetAchievementForUser: function (params, options) {
        var fetchArgs = exports.AchievementApiFetchParamCreator.achievementGetAchievementForUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userId
     */
    achievementGetLeaderboardForUser: function (params, options) {
        var fetchArgs = exports.AchievementApiFetchParamCreator.achievementGetLeaderboardForUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AchievementApi - object-oriented interface
 */
var AchievementApi = (function (_super) {
    __extends(AchievementApi, _super);
    function AchievementApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param userId
     */
    AchievementApi.prototype.achievementGetAchievementForUser = function (params, options) {
        return exports.AchievementApiFp.achievementGetAchievementForUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userId
     */
    AchievementApi.prototype.achievementGetLeaderboardForUser = function (params, options) {
        return exports.AchievementApiFp.achievementGetLeaderboardForUser(params, options)(this.fetch, this.basePath);
    };
    return AchievementApi;
}(BaseAPI));
exports.AchievementApi = AchievementApi;
;
/**
 * AchievementApi - factory interface
 */
exports.AchievementApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param userId
         */
        achievementGetAchievementForUser: function (params, options) {
            return exports.AchievementApiFp.achievementGetAchievementForUser(params, options)(fetch, basePath);
        },
        /**
         * @param userId
         */
        achievementGetLeaderboardForUser: function (params, options) {
            return exports.AchievementApiFp.achievementGetLeaderboardForUser(params, options)(fetch, basePath);
        },
    };
};
/**
 * AddressApi - fetch parameter creator
 */
exports.AddressApiFetchParamCreator = {
    /**
     * Deletes a user&#39;s stored address.
     * @param sessionId
     * @param addressId Address id to delete.
     */
    addressSessionDeleteAddress: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionDeleteAddress");
        }
        // verify required parameter "addressId" is set
        if (params["addressId"] == null) {
            throw new Error("Missing required parameter addressId when calling addressSessionDeleteAddress");
        }
        var baseUrl = "/api/session/{sessionId}/user-address/{addressId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "addressId" + "}", "" + params["addressId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    addressSessionGetAddressDictionary: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionGetAddressDictionary");
        }
        var baseUrl = "/api/session/{sessionId}/user-address"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    addressSessionGetAddressList: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionGetAddressList");
        }
        var baseUrl = "/api/session/{sessionId}/user-address/list"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    addressSessionGetAddressList3: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionGetAddressList3");
        }
        var baseUrl = "/api/v3/session/{sessionId}/user-address"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Adds an address to a user&#39;s account
     * @param sessionId User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    addressSessionPostAddress: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionPostAddress");
        }
        // verify required parameter "address" is set
        if (params["address"] == null) {
            throw new Error("Missing required parameter address when calling addressSessionPostAddress");
        }
        var baseUrl = "/api/session/{sessionId}/user-address"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["address"]) {
            fetchOptions.body = JSON.stringify(params["address"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Adds an address to a user&#39;s account
     * @param sessionId User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    addressSessionPostAddress3: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionPostAddress3");
        }
        // verify required parameter "address" is set
        if (params["address"] == null) {
            throw new Error("Missing required parameter address when calling addressSessionPostAddress3");
        }
        var baseUrl = "/api/v3/session/{sessionId}/user-address"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["address"]) {
            fetchOptions.body = JSON.stringify(params["address"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Updates a user&#39;s stored address.
     * @param sessionId Session id that owns the address
     * @param addressId specifies the address Id to update
     * @param address Address to update, with updated data.
     */
    addressSessionPutAddress: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling addressSessionPutAddress");
        }
        // verify required parameter "addressId" is set
        if (params["addressId"] == null) {
            throw new Error("Missing required parameter addressId when calling addressSessionPutAddress");
        }
        // verify required parameter "address" is set
        if (params["address"] == null) {
            throw new Error("Missing required parameter address when calling addressSessionPutAddress");
        }
        var baseUrl = "/api/session/{sessionId}/user-address/{addressId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "addressId" + "}", "" + params["addressId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["address"]) {
            fetchOptions.body = JSON.stringify(params["address"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Deletes a user&#39;s stored address.
     * @param userGuid Id of the user to delete the address from (for verification against the owner of the address Id,  specified in the request body &#39;address&#39;)
     * @param addressId Address id to delete.
     */
    addressUserDeleteAddress: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling addressUserDeleteAddress");
        }
        // verify required parameter "addressId" is set
        if (params["addressId"] == null) {
            throw new Error("Missing required parameter addressId when calling addressUserDeleteAddress");
        }
        var baseUrl = "/api/user/{userGuid}/address/{addressId}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"])
            .replace("{" + "addressId" + "}", "" + params["addressId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param userGuid Id of the user to get addresses from.
     */
    addressUserGetAddressDictionary: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling addressUserGetAddressDictionary");
        }
        var baseUrl = "/api/user/{userGuid}/address"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Adds an address to a user&#39;s account
     * @param userGuid User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    addressUserPostAddress: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling addressUserPostAddress");
        }
        // verify required parameter "address" is set
        if (params["address"] == null) {
            throw new Error("Missing required parameter address when calling addressUserPostAddress");
        }
        var baseUrl = "/api/user/{userGuid}/address"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["address"]) {
            fetchOptions.body = JSON.stringify(params["address"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Updates a user&#39;s stored address.
     * @param userGuid User id that owns the address
     * @param addressId specifies the address Id to update
     * @param address Address to update, with updated data.
     */
    addressUserPutAddress: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling addressUserPutAddress");
        }
        // verify required parameter "addressId" is set
        if (params["addressId"] == null) {
            throw new Error("Missing required parameter addressId when calling addressUserPutAddress");
        }
        // verify required parameter "address" is set
        if (params["address"] == null) {
            throw new Error("Missing required parameter address when calling addressUserPutAddress");
        }
        var baseUrl = "/api/user/{userGuid}/address/{addressId}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"])
            .replace("{" + "addressId" + "}", "" + params["addressId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["address"]) {
            fetchOptions.body = JSON.stringify(params["address"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AddressApi - functional programming interface
 */
exports.AddressApiFp = {
    /**
     * Deletes a user&#39;s stored address.
     * @param sessionId
     * @param addressId Address id to delete.
     */
    addressSessionDeleteAddress: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionDeleteAddress(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    addressSessionGetAddressDictionary: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionGetAddressDictionary(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    addressSessionGetAddressList: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionGetAddressList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    addressSessionGetAddressList3: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionGetAddressList3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Adds an address to a user&#39;s account
     * @param sessionId User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    addressSessionPostAddress: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionPostAddress(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Adds an address to a user&#39;s account
     * @param sessionId User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    addressSessionPostAddress3: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionPostAddress3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Updates a user&#39;s stored address.
     * @param sessionId Session id that owns the address
     * @param addressId specifies the address Id to update
     * @param address Address to update, with updated data.
     */
    addressSessionPutAddress: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressSessionPutAddress(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Deletes a user&#39;s stored address.
     * @param userGuid Id of the user to delete the address from (for verification against the owner of the address Id,  specified in the request body &#39;address&#39;)
     * @param addressId Address id to delete.
     */
    addressUserDeleteAddress: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressUserDeleteAddress(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the addresses for a specified user.
     * @param userGuid Id of the user to get addresses from.
     */
    addressUserGetAddressDictionary: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressUserGetAddressDictionary(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Adds an address to a user&#39;s account
     * @param userGuid User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    addressUserPostAddress: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressUserPostAddress(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Updates a user&#39;s stored address.
     * @param userGuid User id that owns the address
     * @param addressId specifies the address Id to update
     * @param address Address to update, with updated data.
     */
    addressUserPutAddress: function (params, options) {
        var fetchArgs = exports.AddressApiFetchParamCreator.addressUserPutAddress(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AddressApi - object-oriented interface
 */
var AddressApi = (function (_super) {
    __extends(AddressApi, _super);
    function AddressApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a user&#39;s stored address.
     * @param sessionId
     * @param addressId Address id to delete.
     */
    AddressApi.prototype.addressSessionDeleteAddress = function (params, options) {
        return exports.AddressApiFp.addressSessionDeleteAddress(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    AddressApi.prototype.addressSessionGetAddressDictionary = function (params, options) {
        return exports.AddressApiFp.addressSessionGetAddressDictionary(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    AddressApi.prototype.addressSessionGetAddressList = function (params, options) {
        return exports.AddressApiFp.addressSessionGetAddressList(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the addresses for a specified user.
     * @param sessionId sessionId of the user to get addresses from.
     */
    AddressApi.prototype.addressSessionGetAddressList3 = function (params, options) {
        return exports.AddressApiFp.addressSessionGetAddressList3(params, options)(this.fetch, this.basePath);
    };
    /**
     * Adds an address to a user&#39;s account
     * @param sessionId User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    AddressApi.prototype.addressSessionPostAddress = function (params, options) {
        return exports.AddressApiFp.addressSessionPostAddress(params, options)(this.fetch, this.basePath);
    };
    /**
     * Adds an address to a user&#39;s account
     * @param sessionId User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    AddressApi.prototype.addressSessionPostAddress3 = function (params, options) {
        return exports.AddressApiFp.addressSessionPostAddress3(params, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a user&#39;s stored address.
     * @param sessionId Session id that owns the address
     * @param addressId specifies the address Id to update
     * @param address Address to update, with updated data.
     */
    AddressApi.prototype.addressSessionPutAddress = function (params, options) {
        return exports.AddressApiFp.addressSessionPutAddress(params, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a user&#39;s stored address.
     * @param userGuid Id of the user to delete the address from (for verification against the owner of the address Id,  specified in the request body &#39;address&#39;)
     * @param addressId Address id to delete.
     */
    AddressApi.prototype.addressUserDeleteAddress = function (params, options) {
        return exports.AddressApiFp.addressUserDeleteAddress(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the addresses for a specified user.
     * @param userGuid Id of the user to get addresses from.
     */
    AddressApi.prototype.addressUserGetAddressDictionary = function (params, options) {
        return exports.AddressApiFp.addressUserGetAddressDictionary(params, options)(this.fetch, this.basePath);
    };
    /**
     * Adds an address to a user&#39;s account
     * @param userGuid User id to add the address to
     * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
     */
    AddressApi.prototype.addressUserPostAddress = function (params, options) {
        return exports.AddressApiFp.addressUserPostAddress(params, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a user&#39;s stored address.
     * @param userGuid User id that owns the address
     * @param addressId specifies the address Id to update
     * @param address Address to update, with updated data.
     */
    AddressApi.prototype.addressUserPutAddress = function (params, options) {
        return exports.AddressApiFp.addressUserPutAddress(params, options)(this.fetch, this.basePath);
    };
    return AddressApi;
}(BaseAPI));
exports.AddressApi = AddressApi;
;
/**
 * AddressApi - factory interface
 */
exports.AddressApiFactory = function (fetch, basePath) {
    return {
        /**
         * Deletes a user&#39;s stored address.
         * @param sessionId
         * @param addressId Address id to delete.
         */
        addressSessionDeleteAddress: function (params, options) {
            return exports.AddressApiFp.addressSessionDeleteAddress(params, options)(fetch, basePath);
        },
        /**
         * Gets the addresses for a specified user.
         * @param sessionId sessionId of the user to get addresses from.
         */
        addressSessionGetAddressDictionary: function (params, options) {
            return exports.AddressApiFp.addressSessionGetAddressDictionary(params, options)(fetch, basePath);
        },
        /**
         * Gets the addresses for a specified user.
         * @param sessionId sessionId of the user to get addresses from.
         */
        addressSessionGetAddressList: function (params, options) {
            return exports.AddressApiFp.addressSessionGetAddressList(params, options)(fetch, basePath);
        },
        /**
         * Gets the addresses for a specified user.
         * @param sessionId sessionId of the user to get addresses from.
         */
        addressSessionGetAddressList3: function (params, options) {
            return exports.AddressApiFp.addressSessionGetAddressList3(params, options)(fetch, basePath);
        },
        /**
         * Adds an address to a user&#39;s account
         * @param sessionId User id to add the address to
         * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
         */
        addressSessionPostAddress: function (params, options) {
            return exports.AddressApiFp.addressSessionPostAddress(params, options)(fetch, basePath);
        },
        /**
         * Adds an address to a user&#39;s account
         * @param sessionId User id to add the address to
         * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
         */
        addressSessionPostAddress3: function (params, options) {
            return exports.AddressApiFp.addressSessionPostAddress3(params, options)(fetch, basePath);
        },
        /**
         * Updates a user&#39;s stored address.
         * @param sessionId Session id that owns the address
         * @param addressId specifies the address Id to update
         * @param address Address to update, with updated data.
         */
        addressSessionPutAddress: function (params, options) {
            return exports.AddressApiFp.addressSessionPutAddress(params, options)(fetch, basePath);
        },
        /**
         * Deletes a user&#39;s stored address.
         * @param userGuid Id of the user to delete the address from (for verification against the owner of the address Id,  specified in the request body &#39;address&#39;)
         * @param addressId Address id to delete.
         */
        addressUserDeleteAddress: function (params, options) {
            return exports.AddressApiFp.addressUserDeleteAddress(params, options)(fetch, basePath);
        },
        /**
         * Gets the addresses for a specified user.
         * @param userGuid Id of the user to get addresses from.
         */
        addressUserGetAddressDictionary: function (params, options) {
            return exports.AddressApiFp.addressUserGetAddressDictionary(params, options)(fetch, basePath);
        },
        /**
         * Adds an address to a user&#39;s account
         * @param userGuid User id to add the address to
         * @param address Address data to add (you can leave the &#39;id&#39; field here empty/zero because it&#39;s auto-generated by  the database)
         */
        addressUserPostAddress: function (params, options) {
            return exports.AddressApiFp.addressUserPostAddress(params, options)(fetch, basePath);
        },
        /**
         * Updates a user&#39;s stored address.
         * @param userGuid User id that owns the address
         * @param addressId specifies the address Id to update
         * @param address Address to update, with updated data.
         */
        addressUserPutAddress: function (params, options) {
            return exports.AddressApiFp.addressUserPutAddress(params, options)(fetch, basePath);
        },
    };
};
/**
 * AdjustmentApi - fetch parameter creator
 */
exports.AdjustmentApiFetchParamCreator = {
    /**
     * @param model
     */
    adjustmentCreateAdjustmentForSku: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling adjustmentCreateAdjustmentForSku");
        }
        var baseUrl = "/api/admin/adjustment/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    adjustmentExecAdjustment: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adjustmentExecAdjustment");
        }
        var baseUrl = "/api/admin/adjustment/exec/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AdjustmentApi - functional programming interface
 */
exports.AdjustmentApiFp = {
    /**
     * @param model
     */
    adjustmentCreateAdjustmentForSku: function (params, options) {
        var fetchArgs = exports.AdjustmentApiFetchParamCreator.adjustmentCreateAdjustmentForSku(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    adjustmentExecAdjustment: function (params, options) {
        var fetchArgs = exports.AdjustmentApiFetchParamCreator.adjustmentExecAdjustment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AdjustmentApi - object-oriented interface
 */
var AdjustmentApi = (function (_super) {
    __extends(AdjustmentApi, _super);
    function AdjustmentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param model
     */
    AdjustmentApi.prototype.adjustmentCreateAdjustmentForSku = function (params, options) {
        return exports.AdjustmentApiFp.adjustmentCreateAdjustmentForSku(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    AdjustmentApi.prototype.adjustmentExecAdjustment = function (params, options) {
        return exports.AdjustmentApiFp.adjustmentExecAdjustment(params, options)(this.fetch, this.basePath);
    };
    return AdjustmentApi;
}(BaseAPI));
exports.AdjustmentApi = AdjustmentApi;
;
/**
 * AdjustmentApi - factory interface
 */
exports.AdjustmentApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param model
         */
        adjustmentCreateAdjustmentForSku: function (params, options) {
            return exports.AdjustmentApiFp.adjustmentCreateAdjustmentForSku(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        adjustmentExecAdjustment: function (params, options) {
            return exports.AdjustmentApiFp.adjustmentExecAdjustment(params, options)(fetch, basePath);
        },
    };
};
/**
 * AdminCampaignApi - fetch parameter creator
 */
exports.AdminCampaignApiFetchParamCreator = {
    /**
     * @param campaignId
     */
    adminCampaignExport: function (params, options) {
        // verify required parameter "campaignId" is set
        if (params["campaignId"] == null) {
            throw new Error("Missing required parameter campaignId when calling adminCampaignExport");
        }
        var baseUrl = "/api/admin/campaign/export/{campaignId}"
            .replace("{" + "campaignId" + "}", "" + params["campaignId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param campaignId
     */
    adminCampaignPick: function (params, options) {
        // verify required parameter "campaignId" is set
        if (params["campaignId"] == null) {
            throw new Error("Missing required parameter campaignId when calling adminCampaignPick");
        }
        var baseUrl = "/api/admin/campaign/pick/{campaignId}"
            .replace("{" + "campaignId" + "}", "" + params["campaignId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AdminCampaignApi - functional programming interface
 */
exports.AdminCampaignApiFp = {
    /**
     * @param campaignId
     */
    adminCampaignExport: function (params, options) {
        var fetchArgs = exports.AdminCampaignApiFetchParamCreator.adminCampaignExport(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param campaignId
     */
    adminCampaignPick: function (params, options) {
        var fetchArgs = exports.AdminCampaignApiFetchParamCreator.adminCampaignPick(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AdminCampaignApi - object-oriented interface
 */
var AdminCampaignApi = (function (_super) {
    __extends(AdminCampaignApi, _super);
    function AdminCampaignApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param campaignId
     */
    AdminCampaignApi.prototype.adminCampaignExport = function (params, options) {
        return exports.AdminCampaignApiFp.adminCampaignExport(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param campaignId
     */
    AdminCampaignApi.prototype.adminCampaignPick = function (params, options) {
        return exports.AdminCampaignApiFp.adminCampaignPick(params, options)(this.fetch, this.basePath);
    };
    return AdminCampaignApi;
}(BaseAPI));
exports.AdminCampaignApi = AdminCampaignApi;
;
/**
 * AdminCampaignApi - factory interface
 */
exports.AdminCampaignApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param campaignId
         */
        adminCampaignExport: function (params, options) {
            return exports.AdminCampaignApiFp.adminCampaignExport(params, options)(fetch, basePath);
        },
        /**
         * @param campaignId
         */
        adminCampaignPick: function (params, options) {
            return exports.AdminCampaignApiFp.adminCampaignPick(params, options)(fetch, basePath);
        },
    };
};
/**
 * AdminDeliveryApi - fetch parameter creator
 */
exports.AdminDeliveryApiFetchParamCreator = {
    /**
     * @param model
     */
    adminDeliveryCreateDelivery: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling adminDeliveryCreateDelivery");
        }
        var baseUrl = "/api/admin/SkuDelivery";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    adminDeliveryListDeliveries: function (options) {
        var baseUrl = "/api/admin/SkuDelivery";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AdminDeliveryApi - functional programming interface
 */
exports.AdminDeliveryApiFp = {
    /**
     * @param model
     */
    adminDeliveryCreateDelivery: function (params, options) {
        var fetchArgs = exports.AdminDeliveryApiFetchParamCreator.adminDeliveryCreateDelivery(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    adminDeliveryListDeliveries: function (options) {
        var fetchArgs = exports.AdminDeliveryApiFetchParamCreator.adminDeliveryListDeliveries(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AdminDeliveryApi - object-oriented interface
 */
var AdminDeliveryApi = (function (_super) {
    __extends(AdminDeliveryApi, _super);
    function AdminDeliveryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param model
     */
    AdminDeliveryApi.prototype.adminDeliveryCreateDelivery = function (params, options) {
        return exports.AdminDeliveryApiFp.adminDeliveryCreateDelivery(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    AdminDeliveryApi.prototype.adminDeliveryListDeliveries = function (options) {
        return exports.AdminDeliveryApiFp.adminDeliveryListDeliveries(options)(this.fetch, this.basePath);
    };
    return AdminDeliveryApi;
}(BaseAPI));
exports.AdminDeliveryApi = AdminDeliveryApi;
;
/**
 * AdminDeliveryApi - factory interface
 */
exports.AdminDeliveryApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param model
         */
        adminDeliveryCreateDelivery: function (params, options) {
            return exports.AdminDeliveryApiFp.adminDeliveryCreateDelivery(params, options)(fetch, basePath);
        },
        /**
         */
        adminDeliveryListDeliveries: function (options) {
            return exports.AdminDeliveryApiFp.adminDeliveryListDeliveries(options)(fetch, basePath);
        },
    };
};
/**
 * AdminOrderApi - fetch parameter creator
 */
exports.AdminOrderApiFetchParamCreator = {
    /**
     * @param fix
     * @param orderGuid
     */
    adminOrderArFindMisallocations: function (params, options) {
        var baseUrl = "/api/admin/misallocations";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "fix": params["fix"],
            "orderGuid": params["orderGuid"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Retrieves detail, including bottle info, about a specific order.
     * @param id Order id.
     */
    adminOrderArOrderById: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adminOrderArOrderById");
        }
        var baseUrl = "/api/admin/orders/byId/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    adminOrderArOrderCaptureSingle: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adminOrderArOrderCaptureSingle");
        }
        var baseUrl = "/api/captureOrder/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     * @param details
     */
    adminOrderArOrderPromoApply: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adminOrderArOrderPromoApply");
        }
        // verify required parameter "details" is set
        if (params["details"] == null) {
            throw new Error("Missing required parameter details when calling adminOrderArOrderPromoApply");
        }
        var baseUrl = "/api/admin/orders/byId/{id}/promocode"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["details"]) {
            fetchOptions.body = JSON.stringify(params["details"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Updates the order status of one or more order(s).
     * @param details The orders to update (order id and status must be filled in).
     */
    adminOrderArOrderPut: function (params, options) {
        // verify required parameter "details" is set
        if (params["details"] == null) {
            throw new Error("Missing required parameter details when calling adminOrderArOrderPut");
        }
        var baseUrl = "/api/admin/orders/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["details"]) {
            fetchOptions.body = JSON.stringify(params["details"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     * @param background
     */
    adminOrderArOrderReject: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adminOrderArOrderReject");
        }
        var baseUrl = "/api/admin/orders/byId/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "background": params["background"],
        });
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    adminOrderArOrderRepick: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adminOrderArOrderRepick");
        }
        var baseUrl = "/api/admin/orders/byId/{id}/repick"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets a list of orders, with paging information. Can also filter the orders based on a search criterion. Bottle  information is not available.
     * @param skip Skip.
     * @param take Take.
     * @param search Search.
     */
    adminOrderArOrderSearch: function (params, options) {
        var baseUrl = "/api/admin/orders/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AdminOrderApi - functional programming interface
 */
exports.AdminOrderApiFp = {
    /**
     * @param fix
     * @param orderGuid
     */
    adminOrderArFindMisallocations: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArFindMisallocations(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Retrieves detail, including bottle info, about a specific order.
     * @param id Order id.
     */
    adminOrderArOrderById: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    adminOrderArOrderCaptureSingle: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderCaptureSingle(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     * @param details
     */
    adminOrderArOrderPromoApply: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderPromoApply(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Updates the order status of one or more order(s).
     * @param details The orders to update (order id and status must be filled in).
     */
    adminOrderArOrderPut: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     * @param background
     */
    adminOrderArOrderReject: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderReject(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    adminOrderArOrderRepick: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderRepick(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets a list of orders, with paging information. Can also filter the orders based on a search criterion. Bottle  information is not available.
     * @param skip Skip.
     * @param take Take.
     * @param search Search.
     */
    adminOrderArOrderSearch: function (params, options) {
        var fetchArgs = exports.AdminOrderApiFetchParamCreator.adminOrderArOrderSearch(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AdminOrderApi - object-oriented interface
 */
var AdminOrderApi = (function (_super) {
    __extends(AdminOrderApi, _super);
    function AdminOrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param fix
     * @param orderGuid
     */
    AdminOrderApi.prototype.adminOrderArFindMisallocations = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArFindMisallocations(params, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves detail, including bottle info, about a specific order.
     * @param id Order id.
     */
    AdminOrderApi.prototype.adminOrderArOrderById = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    AdminOrderApi.prototype.adminOrderArOrderCaptureSingle = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderCaptureSingle(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     * @param details
     */
    AdminOrderApi.prototype.adminOrderArOrderPromoApply = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderPromoApply(params, options)(this.fetch, this.basePath);
    };
    /**
     * Updates the order status of one or more order(s).
     * @param details The orders to update (order id and status must be filled in).
     */
    AdminOrderApi.prototype.adminOrderArOrderPut = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     * @param background
     */
    AdminOrderApi.prototype.adminOrderArOrderReject = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderReject(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    AdminOrderApi.prototype.adminOrderArOrderRepick = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderRepick(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets a list of orders, with paging information. Can also filter the orders based on a search criterion. Bottle  information is not available.
     * @param skip Skip.
     * @param take Take.
     * @param search Search.
     */
    AdminOrderApi.prototype.adminOrderArOrderSearch = function (params, options) {
        return exports.AdminOrderApiFp.adminOrderArOrderSearch(params, options)(this.fetch, this.basePath);
    };
    return AdminOrderApi;
}(BaseAPI));
exports.AdminOrderApi = AdminOrderApi;
;
/**
 * AdminOrderApi - factory interface
 */
exports.AdminOrderApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param fix
         * @param orderGuid
         */
        adminOrderArFindMisallocations: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArFindMisallocations(params, options)(fetch, basePath);
        },
        /**
         * Retrieves detail, including bottle info, about a specific order.
         * @param id Order id.
         */
        adminOrderArOrderById: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderById(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        adminOrderArOrderCaptureSingle: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderCaptureSingle(params, options)(fetch, basePath);
        },
        /**
         * @param id
         * @param details
         */
        adminOrderArOrderPromoApply: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderPromoApply(params, options)(fetch, basePath);
        },
        /**
         * Updates the order status of one or more order(s).
         * @param details The orders to update (order id and status must be filled in).
         */
        adminOrderArOrderPut: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderPut(params, options)(fetch, basePath);
        },
        /**
         * @param id
         * @param background
         */
        adminOrderArOrderReject: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderReject(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        adminOrderArOrderRepick: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderRepick(params, options)(fetch, basePath);
        },
        /**
         * Gets a list of orders, with paging information. Can also filter the orders based on a search criterion. Bottle  information is not available.
         * @param skip Skip.
         * @param take Take.
         * @param search Search.
         */
        adminOrderArOrderSearch: function (params, options) {
            return exports.AdminOrderApiFp.adminOrderArOrderSearch(params, options)(fetch, basePath);
        },
    };
};
/**
 * AdminPromoCodeApi - fetch parameter creator
 */
exports.AdminPromoCodeApiFetchParamCreator = {
    /**
     * @param amount
     * @param hours
     */
    adminPromoCodeAddCreditForUsers: function (params, options) {
        // verify required parameter "amount" is set
        if (params["amount"] == null) {
            throw new Error("Missing required parameter amount when calling adminPromoCodeAddCreditForUsers");
        }
        // verify required parameter "hours" is set
        if (params["hours"] == null) {
            throw new Error("Missing required parameter hours when calling adminPromoCodeAddCreditForUsers");
        }
        var baseUrl = "/api/admin/promo/forAllUsers";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "amount": params["amount"],
            "hours": params["hours"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Deactivates a promo code so it can&#39;t be used.
     * @param code Promo code to deactivate.
     */
    adminPromoCodeDelete: function (params, options) {
        // verify required parameter "code" is set
        if (params["code"] == null) {
            throw new Error("Missing required parameter code when calling adminPromoCodeDelete");
        }
        var baseUrl = "/api/admin/promo";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "code": params["code"],
        });
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets a single promo code, or a list of promo codes.
     * @param search
     * @param skip
     * @param take
     */
    adminPromoCodeGet: function (params, options) {
        // verify required parameter "search" is set
        if (params["search"] == null) {
            throw new Error("Missing required parameter search when calling adminPromoCodeGet");
        }
        var baseUrl = "/api/admin/promo";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "search": params["search"],
            "skip": params["skip"],
            "take": params["take"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Creates a new promo code.
     * @param model
     */
    adminPromoCodePost: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling adminPromoCodePost");
        }
        var baseUrl = "/api/admin/promo";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Updates a new promo code.
     * @param model
     */
    adminPromoCodePut: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling adminPromoCodePut");
        }
        var baseUrl = "/api/admin/promo";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AdminPromoCodeApi - functional programming interface
 */
exports.AdminPromoCodeApiFp = {
    /**
     * @param amount
     * @param hours
     */
    adminPromoCodeAddCreditForUsers: function (params, options) {
        var fetchArgs = exports.AdminPromoCodeApiFetchParamCreator.adminPromoCodeAddCreditForUsers(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Deactivates a promo code so it can&#39;t be used.
     * @param code Promo code to deactivate.
     */
    adminPromoCodeDelete: function (params, options) {
        var fetchArgs = exports.AdminPromoCodeApiFetchParamCreator.adminPromoCodeDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets a single promo code, or a list of promo codes.
     * @param search
     * @param skip
     * @param take
     */
    adminPromoCodeGet: function (params, options) {
        var fetchArgs = exports.AdminPromoCodeApiFetchParamCreator.adminPromoCodeGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Creates a new promo code.
     * @param model
     */
    adminPromoCodePost: function (params, options) {
        var fetchArgs = exports.AdminPromoCodeApiFetchParamCreator.adminPromoCodePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Updates a new promo code.
     * @param model
     */
    adminPromoCodePut: function (params, options) {
        var fetchArgs = exports.AdminPromoCodeApiFetchParamCreator.adminPromoCodePut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AdminPromoCodeApi - object-oriented interface
 */
var AdminPromoCodeApi = (function (_super) {
    __extends(AdminPromoCodeApi, _super);
    function AdminPromoCodeApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param amount
     * @param hours
     */
    AdminPromoCodeApi.prototype.adminPromoCodeAddCreditForUsers = function (params, options) {
        return exports.AdminPromoCodeApiFp.adminPromoCodeAddCreditForUsers(params, options)(this.fetch, this.basePath);
    };
    /**
     * Deactivates a promo code so it can&#39;t be used.
     * @param code Promo code to deactivate.
     */
    AdminPromoCodeApi.prototype.adminPromoCodeDelete = function (params, options) {
        return exports.AdminPromoCodeApiFp.adminPromoCodeDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets a single promo code, or a list of promo codes.
     * @param search
     * @param skip
     * @param take
     */
    AdminPromoCodeApi.prototype.adminPromoCodeGet = function (params, options) {
        return exports.AdminPromoCodeApiFp.adminPromoCodeGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * Creates a new promo code.
     * @param model
     */
    AdminPromoCodeApi.prototype.adminPromoCodePost = function (params, options) {
        return exports.AdminPromoCodeApiFp.adminPromoCodePost(params, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a new promo code.
     * @param model
     */
    AdminPromoCodeApi.prototype.adminPromoCodePut = function (params, options) {
        return exports.AdminPromoCodeApiFp.adminPromoCodePut(params, options)(this.fetch, this.basePath);
    };
    return AdminPromoCodeApi;
}(BaseAPI));
exports.AdminPromoCodeApi = AdminPromoCodeApi;
;
/**
 * AdminPromoCodeApi - factory interface
 */
exports.AdminPromoCodeApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param amount
         * @param hours
         */
        adminPromoCodeAddCreditForUsers: function (params, options) {
            return exports.AdminPromoCodeApiFp.adminPromoCodeAddCreditForUsers(params, options)(fetch, basePath);
        },
        /**
         * Deactivates a promo code so it can&#39;t be used.
         * @param code Promo code to deactivate.
         */
        adminPromoCodeDelete: function (params, options) {
            return exports.AdminPromoCodeApiFp.adminPromoCodeDelete(params, options)(fetch, basePath);
        },
        /**
         * Gets a single promo code, or a list of promo codes.
         * @param search
         * @param skip
         * @param take
         */
        adminPromoCodeGet: function (params, options) {
            return exports.AdminPromoCodeApiFp.adminPromoCodeGet(params, options)(fetch, basePath);
        },
        /**
         * Creates a new promo code.
         * @param model
         */
        adminPromoCodePost: function (params, options) {
            return exports.AdminPromoCodeApiFp.adminPromoCodePost(params, options)(fetch, basePath);
        },
        /**
         * Updates a new promo code.
         * @param model
         */
        adminPromoCodePut: function (params, options) {
            return exports.AdminPromoCodeApiFp.adminPromoCodePut(params, options)(fetch, basePath);
        },
    };
};
/**
 * AdminReferralApi - fetch parameter creator
 */
exports.AdminReferralApiFetchParamCreator = {
    /**
     */
    adminReferralGet: function (options) {
        var baseUrl = "/api/admin/referral";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userId
     * @param skip
     * @param take
     */
    adminReferralGet_1: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling adminReferralGet_1");
        }
        var baseUrl = "/api/admin/referrals/list/byUser/{userId}"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Sets the referral of user. Doesn&#39;t automatically give  the bonus; the bonus must manually be added by the admin if the referred user already made first purchase. If the  referred user later  makes the first purchase, then the system will automatically credit the appropriate awards.
     * @param id User id
     * @param data Email address of user to credit with referral
     */
    adminReferralPost: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling adminReferralPost");
        }
        // verify required parameter "data" is set
        if (params["data"] == null) {
            throw new Error("Missing required parameter data when calling adminReferralPost");
        }
        var baseUrl = "/api/admin/referral/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["data"]) {
            fetchOptions.body = JSON.stringify(params["data"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AdminReferralApi - functional programming interface
 */
exports.AdminReferralApiFp = {
    /**
     */
    adminReferralGet: function (options) {
        var fetchArgs = exports.AdminReferralApiFetchParamCreator.adminReferralGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userId
     * @param skip
     * @param take
     */
    adminReferralGet_1: function (params, options) {
        var fetchArgs = exports.AdminReferralApiFetchParamCreator.adminReferralGet_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Sets the referral of user. Doesn&#39;t automatically give  the bonus; the bonus must manually be added by the admin if the referred user already made first purchase. If the  referred user later  makes the first purchase, then the system will automatically credit the appropriate awards.
     * @param id User id
     * @param data Email address of user to credit with referral
     */
    adminReferralPost: function (params, options) {
        var fetchArgs = exports.AdminReferralApiFetchParamCreator.adminReferralPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AdminReferralApi - object-oriented interface
 */
var AdminReferralApi = (function (_super) {
    __extends(AdminReferralApi, _super);
    function AdminReferralApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     */
    AdminReferralApi.prototype.adminReferralGet = function (options) {
        return exports.AdminReferralApiFp.adminReferralGet(options)(this.fetch, this.basePath);
    };
    /**
     * @param userId
     * @param skip
     * @param take
     */
    AdminReferralApi.prototype.adminReferralGet_1 = function (params, options) {
        return exports.AdminReferralApiFp.adminReferralGet_1(params, options)(this.fetch, this.basePath);
    };
    /**
     * Sets the referral of user. Doesn&#39;t automatically give  the bonus; the bonus must manually be added by the admin if the referred user already made first purchase. If the  referred user later  makes the first purchase, then the system will automatically credit the appropriate awards.
     * @param id User id
     * @param data Email address of user to credit with referral
     */
    AdminReferralApi.prototype.adminReferralPost = function (params, options) {
        return exports.AdminReferralApiFp.adminReferralPost(params, options)(this.fetch, this.basePath);
    };
    return AdminReferralApi;
}(BaseAPI));
exports.AdminReferralApi = AdminReferralApi;
;
/**
 * AdminReferralApi - factory interface
 */
exports.AdminReferralApiFactory = function (fetch, basePath) {
    return {
        /**
         */
        adminReferralGet: function (options) {
            return exports.AdminReferralApiFp.adminReferralGet(options)(fetch, basePath);
        },
        /**
         * @param userId
         * @param skip
         * @param take
         */
        adminReferralGet_1: function (params, options) {
            return exports.AdminReferralApiFp.adminReferralGet_1(params, options)(fetch, basePath);
        },
        /**
         * Sets the referral of user. Doesn&#39;t automatically give  the bonus; the bonus must manually be added by the admin if the referred user already made first purchase. If the  referred user later  makes the first purchase, then the system will automatically credit the appropriate awards.
         * @param id User id
         * @param data Email address of user to credit with referral
         */
        adminReferralPost: function (params, options) {
            return exports.AdminReferralApiFp.adminReferralPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * CampaignApi - fetch parameter creator
 */
exports.CampaignApiFetchParamCreator = {
    /**
     * @param id
     * @param userId
     */
    campaignGet: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling campaignGet");
        }
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling campaignGet");
        }
        var baseUrl = "/api/campaign/{id}/{userId}"
            .replace("{" + "id" + "}", "" + params["id"])
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     * @param model
     */
    campaignPostEntry: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling campaignPostEntry");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling campaignPostEntry");
        }
        var baseUrl = "/api/campaign/{id}/entry"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CampaignApi - functional programming interface
 */
exports.CampaignApiFp = {
    /**
     * @param id
     * @param userId
     */
    campaignGet: function (params, options) {
        var fetchArgs = exports.CampaignApiFetchParamCreator.campaignGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     * @param model
     */
    campaignPostEntry: function (params, options) {
        var fetchArgs = exports.CampaignApiFetchParamCreator.campaignPostEntry(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CampaignApi - object-oriented interface
 */
var CampaignApi = (function (_super) {
    __extends(CampaignApi, _super);
    function CampaignApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param id
     * @param userId
     */
    CampaignApi.prototype.campaignGet = function (params, options) {
        return exports.CampaignApiFp.campaignGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     * @param model
     */
    CampaignApi.prototype.campaignPostEntry = function (params, options) {
        return exports.CampaignApiFp.campaignPostEntry(params, options)(this.fetch, this.basePath);
    };
    return CampaignApi;
}(BaseAPI));
exports.CampaignApi = CampaignApi;
;
/**
 * CampaignApi - factory interface
 */
exports.CampaignApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param id
         * @param userId
         */
        campaignGet: function (params, options) {
            return exports.CampaignApiFp.campaignGet(params, options)(fetch, basePath);
        },
        /**
         * @param id
         * @param model
         */
        campaignPostEntry: function (params, options) {
            return exports.CampaignApiFp.campaignPostEntry(params, options)(fetch, basePath);
        },
    };
};
/**
 * CheckoutApiApi - fetch parameter creator
 */
exports.CheckoutApiApiFetchParamCreator = {
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostFromSession: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPostFromSession");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPostFromSession");
        }
        var baseUrl = "/api/session/{sessionId}/checkout"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostFromSessionV3: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPostFromSessionV3");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPostFromSessionV3");
        }
        var baseUrl = "/api/v3/session/{sessionId}/checkout"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostShipmentFromSession: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPostShipmentFromSession");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPostShipmentFromSession");
        }
        var baseUrl = "/api/session/{sessionId}/ship"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostShipmentFromSessionV3: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPostShipmentFromSessionV3");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPostShipmentFromSessionV3");
        }
        var baseUrl = "/api/v3/session/{sessionId}/ship"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutFromSession: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPutFromSession");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPutFromSession");
        }
        var baseUrl = "/api/session/{sessionId}/checkout"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutFromSessionV3: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPutFromSessionV3");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPutFromSessionV3");
        }
        var baseUrl = "/api/v3/session/{sessionId}/checkout"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutShipmentFromSession: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPutShipmentFromSession");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPutShipmentFromSession");
        }
        var baseUrl = "/api/session/{sessionId}/ship"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutShipmentFromSessionV3: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling checkoutApiPutShipmentFromSessionV3");
        }
        // verify required parameter "offerCheckoutInfo" is set
        if (params["offerCheckoutInfo"] == null) {
            throw new Error("Missing required parameter offerCheckoutInfo when calling checkoutApiPutShipmentFromSessionV3");
        }
        var baseUrl = "/api/v3/session/{sessionId}/ship"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["offerCheckoutInfo"]) {
            fetchOptions.body = JSON.stringify(params["offerCheckoutInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CheckoutApiApi - functional programming interface
 */
exports.CheckoutApiApiFp = {
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostFromSession: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPostFromSession(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostFromSessionV3: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPostFromSessionV3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostShipmentFromSession: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPostShipmentFromSession(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPostShipmentFromSessionV3: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPostShipmentFromSessionV3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutFromSession: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPutFromSession(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutFromSessionV3: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPutFromSessionV3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutShipmentFromSession: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPutShipmentFromSession(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Simulate a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    checkoutApiPutShipmentFromSessionV3: function (params, options) {
        var fetchArgs = exports.CheckoutApiApiFetchParamCreator.checkoutApiPutShipmentFromSessionV3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CheckoutApiApi - object-oriented interface
 */
var CheckoutApiApi = (function (_super) {
    __extends(CheckoutApiApi, _super);
    function CheckoutApiApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPostFromSession = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPostFromSession(params, options)(this.fetch, this.basePath);
    };
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPostFromSessionV3 = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPostFromSessionV3(params, options)(this.fetch, this.basePath);
    };
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPostShipmentFromSession = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPostShipmentFromSession(params, options)(this.fetch, this.basePath);
    };
    /**
     * Process a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPostShipmentFromSessionV3 = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPostShipmentFromSessionV3(params, options)(this.fetch, this.basePath);
    };
    /**
     * Simulate a checkout operation.
     * @param sessionId
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPutFromSession = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPutFromSession(params, options)(this.fetch, this.basePath);
    };
    /**
     * Simulate a checkout operation.
     * @param sessionId
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPutFromSessionV3 = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPutFromSessionV3(params, options)(this.fetch, this.basePath);
    };
    /**
     * Simulate a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPutShipmentFromSession = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPutShipmentFromSession(params, options)(this.fetch, this.basePath);
    };
    /**
     * Simulate a checkout operation.
     * @param sessionId Session ID.
     * @param offerCheckoutInfo The checkout information.
     */
    CheckoutApiApi.prototype.checkoutApiPutShipmentFromSessionV3 = function (params, options) {
        return exports.CheckoutApiApiFp.checkoutApiPutShipmentFromSessionV3(params, options)(this.fetch, this.basePath);
    };
    return CheckoutApiApi;
}(BaseAPI));
exports.CheckoutApiApi = CheckoutApiApi;
;
/**
 * CheckoutApiApi - factory interface
 */
exports.CheckoutApiApiFactory = function (fetch, basePath) {
    return {
        /**
         * Process a checkout operation.
         * @param sessionId Session ID.
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPostFromSession: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPostFromSession(params, options)(fetch, basePath);
        },
        /**
         * Process a checkout operation.
         * @param sessionId Session ID.
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPostFromSessionV3: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPostFromSessionV3(params, options)(fetch, basePath);
        },
        /**
         * Process a checkout operation.
         * @param sessionId Session ID.
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPostShipmentFromSession: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPostShipmentFromSession(params, options)(fetch, basePath);
        },
        /**
         * Process a checkout operation.
         * @param sessionId Session ID.
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPostShipmentFromSessionV3: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPostShipmentFromSessionV3(params, options)(fetch, basePath);
        },
        /**
         * Simulate a checkout operation.
         * @param sessionId
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPutFromSession: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPutFromSession(params, options)(fetch, basePath);
        },
        /**
         * Simulate a checkout operation.
         * @param sessionId
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPutFromSessionV3: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPutFromSessionV3(params, options)(fetch, basePath);
        },
        /**
         * Simulate a checkout operation.
         * @param sessionId Session ID.
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPutShipmentFromSession: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPutShipmentFromSession(params, options)(fetch, basePath);
        },
        /**
         * Simulate a checkout operation.
         * @param sessionId Session ID.
         * @param offerCheckoutInfo The checkout information.
         */
        checkoutApiPutShipmentFromSessionV3: function (params, options) {
            return exports.CheckoutApiApiFp.checkoutApiPutShipmentFromSessionV3(params, options)(fetch, basePath);
        },
    };
};
/**
 * CloudCellarApi - fetch parameter creator
 */
exports.CloudCellarApiFetchParamCreator = {
    /**
     * @param search
     */
    cloudCellarGetApiCloudcellarSearch: function (params, options) {
        // verify required parameter "search" is set
        if (params["search"] == null) {
            throw new Error("Missing required parameter search when calling cloudCellarGetApiCloudcellarSearch");
        }
        var baseUrl = "/api/v2/admin/cloudcellar";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userName
     */
    cloudCellarGetV2: function (params, options) {
        // verify required parameter "userName" is set
        if (params["userName"] == null) {
            throw new Error("Missing required parameter userName when calling cloudCellarGetV2");
        }
        var baseUrl = "/api/v2/cloudcellar/{userName}"
            .replace("{" + "userName" + "}", "" + params["userName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param prize
     */
    cloudCellarHandleClaimPrize: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling cloudCellarHandleClaimPrize");
        }
        // verify required parameter "prize" is set
        if (params["prize"] == null) {
            throw new Error("Missing required parameter prize when calling cloudCellarHandleClaimPrize");
        }
        var baseUrl = "/api/session/{sessionId}/wordgame/{prize}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "prize" + "}", "" + params["prize"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    cloudCellarHandleGetLetters: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling cloudCellarHandleGetLetters");
        }
        var baseUrl = "/api/session/{sessionId}/wordgame"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CloudCellarApi - functional programming interface
 */
exports.CloudCellarApiFp = {
    /**
     * @param search
     */
    cloudCellarGetApiCloudcellarSearch: function (params, options) {
        var fetchArgs = exports.CloudCellarApiFetchParamCreator.cloudCellarGetApiCloudcellarSearch(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userName
     */
    cloudCellarGetV2: function (params, options) {
        var fetchArgs = exports.CloudCellarApiFetchParamCreator.cloudCellarGetV2(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param prize
     */
    cloudCellarHandleClaimPrize: function (params, options) {
        var fetchArgs = exports.CloudCellarApiFetchParamCreator.cloudCellarHandleClaimPrize(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    cloudCellarHandleGetLetters: function (params, options) {
        var fetchArgs = exports.CloudCellarApiFetchParamCreator.cloudCellarHandleGetLetters(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CloudCellarApi - object-oriented interface
 */
var CloudCellarApi = (function (_super) {
    __extends(CloudCellarApi, _super);
    function CloudCellarApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param search
     */
    CloudCellarApi.prototype.cloudCellarGetApiCloudcellarSearch = function (params, options) {
        return exports.CloudCellarApiFp.cloudCellarGetApiCloudcellarSearch(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userName
     */
    CloudCellarApi.prototype.cloudCellarGetV2 = function (params, options) {
        return exports.CloudCellarApiFp.cloudCellarGetV2(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param prize
     */
    CloudCellarApi.prototype.cloudCellarHandleClaimPrize = function (params, options) {
        return exports.CloudCellarApiFp.cloudCellarHandleClaimPrize(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    CloudCellarApi.prototype.cloudCellarHandleGetLetters = function (params, options) {
        return exports.CloudCellarApiFp.cloudCellarHandleGetLetters(params, options)(this.fetch, this.basePath);
    };
    return CloudCellarApi;
}(BaseAPI));
exports.CloudCellarApi = CloudCellarApi;
;
/**
 * CloudCellarApi - factory interface
 */
exports.CloudCellarApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param search
         */
        cloudCellarGetApiCloudcellarSearch: function (params, options) {
            return exports.CloudCellarApiFp.cloudCellarGetApiCloudcellarSearch(params, options)(fetch, basePath);
        },
        /**
         * @param userName
         */
        cloudCellarGetV2: function (params, options) {
            return exports.CloudCellarApiFp.cloudCellarGetV2(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param prize
         */
        cloudCellarHandleClaimPrize: function (params, options) {
            return exports.CloudCellarApiFp.cloudCellarHandleClaimPrize(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        cloudCellarHandleGetLetters: function (params, options) {
            return exports.CloudCellarApiFp.cloudCellarHandleGetLetters(params, options)(fetch, basePath);
        },
    };
};
/**
 * CplSkuStockApi - fetch parameter creator
 */
exports.CplSkuStockApiFetchParamCreator = {
    /**
     * @param overdue
     */
    cplSkuStockGetArrivals: function (params, options) {
        // verify required parameter "overdue" is set
        if (params["overdue"] == null) {
            throw new Error("Missing required parameter overdue when calling cplSkuStockGetArrivals");
        }
        var baseUrl = "/api/admin/report/arrivals";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "overdue": params["overdue"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    cplSkuStockGetCplStock: function (options) {
        var baseUrl = "/api/admin/report/cplstock";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param beyondDays
     * @param qtyLessThan
     */
    cplSkuStockHandleAdminReportDeficit: function (params, options) {
        var baseUrl = "/api/admin/report/deficit";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "beyondDays": params["beyondDays"],
            "qtyLessThan": params["qtyLessThan"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    cplSkuStockSkuSales: function (options) {
        var baseUrl = "/api/admin/report/skusales";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    cplSkuStockUpdateWarehouseStock: function (options) {
        var baseUrl = "/api/admin/report/cplstock/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * CplSkuStockApi - functional programming interface
 */
exports.CplSkuStockApiFp = {
    /**
     * @param overdue
     */
    cplSkuStockGetArrivals: function (params, options) {
        var fetchArgs = exports.CplSkuStockApiFetchParamCreator.cplSkuStockGetArrivals(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    cplSkuStockGetCplStock: function (options) {
        var fetchArgs = exports.CplSkuStockApiFetchParamCreator.cplSkuStockGetCplStock(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param beyondDays
     * @param qtyLessThan
     */
    cplSkuStockHandleAdminReportDeficit: function (params, options) {
        var fetchArgs = exports.CplSkuStockApiFetchParamCreator.cplSkuStockHandleAdminReportDeficit(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    cplSkuStockSkuSales: function (options) {
        var fetchArgs = exports.CplSkuStockApiFetchParamCreator.cplSkuStockSkuSales(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    cplSkuStockUpdateWarehouseStock: function (options) {
        var fetchArgs = exports.CplSkuStockApiFetchParamCreator.cplSkuStockUpdateWarehouseStock(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * CplSkuStockApi - object-oriented interface
 */
var CplSkuStockApi = (function (_super) {
    __extends(CplSkuStockApi, _super);
    function CplSkuStockApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param overdue
     */
    CplSkuStockApi.prototype.cplSkuStockGetArrivals = function (params, options) {
        return exports.CplSkuStockApiFp.cplSkuStockGetArrivals(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    CplSkuStockApi.prototype.cplSkuStockGetCplStock = function (options) {
        return exports.CplSkuStockApiFp.cplSkuStockGetCplStock(options)(this.fetch, this.basePath);
    };
    /**
     * @param beyondDays
     * @param qtyLessThan
     */
    CplSkuStockApi.prototype.cplSkuStockHandleAdminReportDeficit = function (params, options) {
        return exports.CplSkuStockApiFp.cplSkuStockHandleAdminReportDeficit(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    CplSkuStockApi.prototype.cplSkuStockSkuSales = function (options) {
        return exports.CplSkuStockApiFp.cplSkuStockSkuSales(options)(this.fetch, this.basePath);
    };
    /**
     */
    CplSkuStockApi.prototype.cplSkuStockUpdateWarehouseStock = function (options) {
        return exports.CplSkuStockApiFp.cplSkuStockUpdateWarehouseStock(options)(this.fetch, this.basePath);
    };
    return CplSkuStockApi;
}(BaseAPI));
exports.CplSkuStockApi = CplSkuStockApi;
;
/**
 * CplSkuStockApi - factory interface
 */
exports.CplSkuStockApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param overdue
         */
        cplSkuStockGetArrivals: function (params, options) {
            return exports.CplSkuStockApiFp.cplSkuStockGetArrivals(params, options)(fetch, basePath);
        },
        /**
         */
        cplSkuStockGetCplStock: function (options) {
            return exports.CplSkuStockApiFp.cplSkuStockGetCplStock(options)(fetch, basePath);
        },
        /**
         * @param beyondDays
         * @param qtyLessThan
         */
        cplSkuStockHandleAdminReportDeficit: function (params, options) {
            return exports.CplSkuStockApiFp.cplSkuStockHandleAdminReportDeficit(params, options)(fetch, basePath);
        },
        /**
         */
        cplSkuStockSkuSales: function (options) {
            return exports.CplSkuStockApiFp.cplSkuStockSkuSales(options)(fetch, basePath);
        },
        /**
         */
        cplSkuStockUpdateWarehouseStock: function (options) {
            return exports.CplSkuStockApiFp.cplSkuStockUpdateWarehouseStock(options)(fetch, basePath);
        },
    };
};
/**
 * EmailMarketingApi - fetch parameter creator
 */
exports.EmailMarketingApiFetchParamCreator = {
    /**
     */
    emailMarketingHandleGet: function (options) {
        var baseUrl = "/api/admin/v2/email/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    emailMarketingHandleGetAbandoned: function (options) {
        var baseUrl = "/api/admin/v2/email/list/abandonedCheckout";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skip
     * @param take
     * @param send
     */
    emailMarketingHandleGetExpiring: function (params, options) {
        var baseUrl = "/api/admin/v2/email/list/expiringCredits";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "send": params["send"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param message
     */
    emailMarketingHandleSendPush: function (params, options) {
        // verify required parameter "message" is set
        if (params["message"] == null) {
            throw new Error("Missing required parameter message when calling emailMarketingHandleSendPush");
        }
        var baseUrl = "/api/admin/v2/email/push";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "message": params["message"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param email
     * @param unsubCampaignId
     * @param unsubCampaignTitle
     * @param unsubReason
     */
    emailMarketingHandleUnsub: function (params, options) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling emailMarketingHandleUnsub");
        }
        // verify required parameter "unsubCampaignId" is set
        if (params["unsubCampaignId"] == null) {
            throw new Error("Missing required parameter unsubCampaignId when calling emailMarketingHandleUnsub");
        }
        // verify required parameter "unsubCampaignTitle" is set
        if (params["unsubCampaignTitle"] == null) {
            throw new Error("Missing required parameter unsubCampaignTitle when calling emailMarketingHandleUnsub");
        }
        // verify required parameter "unsubReason" is set
        if (params["unsubReason"] == null) {
            throw new Error("Missing required parameter unsubReason when calling emailMarketingHandleUnsub");
        }
        var baseUrl = "/api/admin/v2/email/list/unsub";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "email": params["email"],
            "unsubCampaignId": params["unsubCampaignId"],
            "unsubCampaignTitle": params["unsubCampaignTitle"],
            "unsubReason": params["unsubReason"],
        });
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param page
     */
    emailMarketingImportDotmailerIds: function (params, options) {
        // verify required parameter "page" is set
        if (params["page"] == null) {
            throw new Error("Missing required parameter page when calling emailMarketingImportDotmailerIds");
        }
        var baseUrl = "/api/admin/v2/dotmailer/pull/{page}"
            .replace("{" + "page" + "}", "" + params["page"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param toEmail
     * @param toName
     */
    emailMarketingSendTest: function (params, options) {
        // verify required parameter "toEmail" is set
        if (params["toEmail"] == null) {
            throw new Error("Missing required parameter toEmail when calling emailMarketingSendTest");
        }
        // verify required parameter "toName" is set
        if (params["toName"] == null) {
            throw new Error("Missing required parameter toName when calling emailMarketingSendTest");
        }
        var baseUrl = "/api/admin/v2/email/test";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "toEmail": params["toEmail"],
            "toName": params["toName"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * EmailMarketingApi - functional programming interface
 */
exports.EmailMarketingApiFp = {
    /**
     */
    emailMarketingHandleGet: function (options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingHandleGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    emailMarketingHandleGetAbandoned: function (options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingHandleGetAbandoned(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skip
     * @param take
     * @param send
     */
    emailMarketingHandleGetExpiring: function (params, options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingHandleGetExpiring(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param message
     */
    emailMarketingHandleSendPush: function (params, options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingHandleSendPush(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param email
     * @param unsubCampaignId
     * @param unsubCampaignTitle
     * @param unsubReason
     */
    emailMarketingHandleUnsub: function (params, options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingHandleUnsub(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param page
     */
    emailMarketingImportDotmailerIds: function (params, options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingImportDotmailerIds(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param toEmail
     * @param toName
     */
    emailMarketingSendTest: function (params, options) {
        var fetchArgs = exports.EmailMarketingApiFetchParamCreator.emailMarketingSendTest(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * EmailMarketingApi - object-oriented interface
 */
var EmailMarketingApi = (function (_super) {
    __extends(EmailMarketingApi, _super);
    function EmailMarketingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     */
    EmailMarketingApi.prototype.emailMarketingHandleGet = function (options) {
        return exports.EmailMarketingApiFp.emailMarketingHandleGet(options)(this.fetch, this.basePath);
    };
    /**
     */
    EmailMarketingApi.prototype.emailMarketingHandleGetAbandoned = function (options) {
        return exports.EmailMarketingApiFp.emailMarketingHandleGetAbandoned(options)(this.fetch, this.basePath);
    };
    /**
     * @param skip
     * @param take
     * @param send
     */
    EmailMarketingApi.prototype.emailMarketingHandleGetExpiring = function (params, options) {
        return exports.EmailMarketingApiFp.emailMarketingHandleGetExpiring(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param message
     */
    EmailMarketingApi.prototype.emailMarketingHandleSendPush = function (params, options) {
        return exports.EmailMarketingApiFp.emailMarketingHandleSendPush(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param email
     * @param unsubCampaignId
     * @param unsubCampaignTitle
     * @param unsubReason
     */
    EmailMarketingApi.prototype.emailMarketingHandleUnsub = function (params, options) {
        return exports.EmailMarketingApiFp.emailMarketingHandleUnsub(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param page
     */
    EmailMarketingApi.prototype.emailMarketingImportDotmailerIds = function (params, options) {
        return exports.EmailMarketingApiFp.emailMarketingImportDotmailerIds(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param toEmail
     * @param toName
     */
    EmailMarketingApi.prototype.emailMarketingSendTest = function (params, options) {
        return exports.EmailMarketingApiFp.emailMarketingSendTest(params, options)(this.fetch, this.basePath);
    };
    return EmailMarketingApi;
}(BaseAPI));
exports.EmailMarketingApi = EmailMarketingApi;
;
/**
 * EmailMarketingApi - factory interface
 */
exports.EmailMarketingApiFactory = function (fetch, basePath) {
    return {
        /**
         */
        emailMarketingHandleGet: function (options) {
            return exports.EmailMarketingApiFp.emailMarketingHandleGet(options)(fetch, basePath);
        },
        /**
         */
        emailMarketingHandleGetAbandoned: function (options) {
            return exports.EmailMarketingApiFp.emailMarketingHandleGetAbandoned(options)(fetch, basePath);
        },
        /**
         * @param skip
         * @param take
         * @param send
         */
        emailMarketingHandleGetExpiring: function (params, options) {
            return exports.EmailMarketingApiFp.emailMarketingHandleGetExpiring(params, options)(fetch, basePath);
        },
        /**
         * @param message
         */
        emailMarketingHandleSendPush: function (params, options) {
            return exports.EmailMarketingApiFp.emailMarketingHandleSendPush(params, options)(fetch, basePath);
        },
        /**
         * @param email
         * @param unsubCampaignId
         * @param unsubCampaignTitle
         * @param unsubReason
         */
        emailMarketingHandleUnsub: function (params, options) {
            return exports.EmailMarketingApiFp.emailMarketingHandleUnsub(params, options)(fetch, basePath);
        },
        /**
         * @param page
         */
        emailMarketingImportDotmailerIds: function (params, options) {
            return exports.EmailMarketingApiFp.emailMarketingImportDotmailerIds(params, options)(fetch, basePath);
        },
        /**
         * @param toEmail
         * @param toName
         */
        emailMarketingSendTest: function (params, options) {
            return exports.EmailMarketingApiFp.emailMarketingSendTest(params, options)(fetch, basePath);
        },
    };
};
/**
 * InviteApi - fetch parameter creator
 */
exports.InviteApiFetchParamCreator = {
    /**
     * @param input
     */
    inviteInviteByEmail: function (params, options) {
        // verify required parameter "input" is set
        if (params["input"] == null) {
            throw new Error("Missing required parameter input when calling inviteInviteByEmail");
        }
        var baseUrl = "/api/invitebyemail";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["input"]) {
            fetchOptions.body = JSON.stringify(params["input"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * InviteApi - functional programming interface
 */
exports.InviteApiFp = {
    /**
     * @param input
     */
    inviteInviteByEmail: function (params, options) {
        var fetchArgs = exports.InviteApiFetchParamCreator.inviteInviteByEmail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * InviteApi - object-oriented interface
 */
var InviteApi = (function (_super) {
    __extends(InviteApi, _super);
    function InviteApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param input
     */
    InviteApi.prototype.inviteInviteByEmail = function (params, options) {
        return exports.InviteApiFp.inviteInviteByEmail(params, options)(this.fetch, this.basePath);
    };
    return InviteApi;
}(BaseAPI));
exports.InviteApi = InviteApi;
;
/**
 * InviteApi - factory interface
 */
exports.InviteApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param input
         */
        inviteInviteByEmail: function (params, options) {
            return exports.InviteApiFp.inviteInviteByEmail(params, options)(fetch, basePath);
        },
    };
};
/**
 * ItemDetailApi - fetch parameter creator
 */
exports.ItemDetailApiFetchParamCreator = {
    /**
     * @param content
     */
    itemDetailDelete: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling itemDetailDelete");
        }
        var baseUrl = "/api/v2/itemdetail";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param itemSef
     */
    itemDetailGetBySefOrSku: function (params, options) {
        // verify required parameter "itemSef" is set
        if (params["itemSef"] == null) {
            throw new Error("Missing required parameter itemSef when calling itemDetailGetBySefOrSku");
        }
        var baseUrl = "/api/v2/itemdetail/{itemSef}"
            .replace("{" + "itemSef" + "}", "" + params["itemSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param search
     * @param skip
     * @param take
     */
    itemDetailListItemDetail: function (params, options) {
        var baseUrl = "/api/v2/itemdetail";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "search": params["search"],
            "skip": params["skip"],
            "take": params["take"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param input
     */
    itemDetailMergeItemDetailHandler: function (params, options) {
        // verify required parameter "input" is set
        if (params["input"] == null) {
            throw new Error("Missing required parameter input when calling itemDetailMergeItemDetailHandler");
        }
        var baseUrl = "/api/v2/itemdetail/merge";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "input": params["input"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param content
     */
    itemDetailPost: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling itemDetailPost");
        }
        var baseUrl = "/api/v2/itemdetail";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param file
     */
    itemDetailPostItemDetailUploadImage: function (params, options) {
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling itemDetailPostItemDetailUploadImage");
        }
        var baseUrl = "/api/v2/itemdetail/uploadImage";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "file": params["file"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param itemSef
     * @param content
     */
    itemDetailPut: function (params, options) {
        // verify required parameter "itemSef" is set
        if (params["itemSef"] == null) {
            throw new Error("Missing required parameter itemSef when calling itemDetailPut");
        }
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling itemDetailPut");
        }
        var baseUrl = "/api/v2/itemdetail/{itemSef}"
            .replace("{" + "itemSef" + "}", "" + params["itemSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ItemDetailApi - functional programming interface
 */
exports.ItemDetailApiFp = {
    /**
     * @param content
     */
    itemDetailDelete: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param itemSef
     */
    itemDetailGetBySefOrSku: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailGetBySefOrSku(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param search
     * @param skip
     * @param take
     */
    itemDetailListItemDetail: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailListItemDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param input
     */
    itemDetailMergeItemDetailHandler: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailMergeItemDetailHandler(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param content
     */
    itemDetailPost: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param file
     */
    itemDetailPostItemDetailUploadImage: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailPostItemDetailUploadImage(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param itemSef
     * @param content
     */
    itemDetailPut: function (params, options) {
        var fetchArgs = exports.ItemDetailApiFetchParamCreator.itemDetailPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ItemDetailApi - object-oriented interface
 */
var ItemDetailApi = (function (_super) {
    __extends(ItemDetailApi, _super);
    function ItemDetailApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param content
     */
    ItemDetailApi.prototype.itemDetailDelete = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param itemSef
     */
    ItemDetailApi.prototype.itemDetailGetBySefOrSku = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailGetBySefOrSku(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param search
     * @param skip
     * @param take
     */
    ItemDetailApi.prototype.itemDetailListItemDetail = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailListItemDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param input
     */
    ItemDetailApi.prototype.itemDetailMergeItemDetailHandler = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailMergeItemDetailHandler(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param content
     */
    ItemDetailApi.prototype.itemDetailPost = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param file
     */
    ItemDetailApi.prototype.itemDetailPostItemDetailUploadImage = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailPostItemDetailUploadImage(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param itemSef
     * @param content
     */
    ItemDetailApi.prototype.itemDetailPut = function (params, options) {
        return exports.ItemDetailApiFp.itemDetailPut(params, options)(this.fetch, this.basePath);
    };
    return ItemDetailApi;
}(BaseAPI));
exports.ItemDetailApi = ItemDetailApi;
;
/**
 * ItemDetailApi - factory interface
 */
exports.ItemDetailApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param content
         */
        itemDetailDelete: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailDelete(params, options)(fetch, basePath);
        },
        /**
         * @param itemSef
         */
        itemDetailGetBySefOrSku: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailGetBySefOrSku(params, options)(fetch, basePath);
        },
        /**
         * @param search
         * @param skip
         * @param take
         */
        itemDetailListItemDetail: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailListItemDetail(params, options)(fetch, basePath);
        },
        /**
         * @param input
         */
        itemDetailMergeItemDetailHandler: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailMergeItemDetailHandler(params, options)(fetch, basePath);
        },
        /**
         * @param content
         */
        itemDetailPost: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailPost(params, options)(fetch, basePath);
        },
        /**
         * @param file
         */
        itemDetailPostItemDetailUploadImage: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailPostItemDetailUploadImage(params, options)(fetch, basePath);
        },
        /**
         * @param itemSef
         * @param content
         */
        itemDetailPut: function (params, options) {
            return exports.ItemDetailApiFp.itemDetailPut(params, options)(fetch, basePath);
        },
    };
};
/**
 * KeyMetricsApi - fetch parameter creator
 */
exports.KeyMetricsApiFetchParamCreator = {
    /**
     * @param utmCampaign
     * @param utmSource
     * @param utmMedium
     */
    keyMetricsGet: function (params, options) {
        var baseUrl = "/api/admin/report/usersummary";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "utmCampaign": params["utmCampaign"],
            "utmSource": params["utmSource"],
            "utmMedium": params["utmMedium"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    keyMetricsGetAdminReportBuyToShip: function (options) {
        var baseUrl = "/api/admin/report/buyToShip";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    keyMetricsGetAdminReportOfferStats: function (options) {
        var baseUrl = "/api/admin/report/names";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param reportName
     * @param startDate
     * @param endDate
     */
    keyMetricsGetAdminReportOfferStats_1: function (params, options) {
        // verify required parameter "reportName" is set
        if (params["reportName"] == null) {
            throw new Error("Missing required parameter reportName when calling keyMetricsGetAdminReportOfferStats_1");
        }
        var baseUrl = "/api/admin/report/names/{reportName}"
            .replace("{" + "reportName" + "}", "" + params["reportName"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "startDate": params["startDate"],
            "endDate": params["endDate"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param promoCode
     */
    keyMetricsGetAdminReportPromo: function (params, options) {
        // verify required parameter "promoCode" is set
        if (params["promoCode"] == null) {
            throw new Error("Missing required parameter promoCode when calling keyMetricsGetAdminReportPromo");
        }
        var baseUrl = "/api/admin/report/promo";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "promoCode": params["promoCode"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    keyMetricsGetCohortAnalysis: function (options) {
        var baseUrl = "/api/admin/cohorts";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param startMonth
     * @param startYear
     * @param minLifeSpend
     */
    keyMetricsGetCohortsByFirstOrder: function (params, options) {
        // verify required parameter "startMonth" is set
        if (params["startMonth"] == null) {
            throw new Error("Missing required parameter startMonth when calling keyMetricsGetCohortsByFirstOrder");
        }
        // verify required parameter "startYear" is set
        if (params["startYear"] == null) {
            throw new Error("Missing required parameter startYear when calling keyMetricsGetCohortsByFirstOrder");
        }
        // verify required parameter "minLifeSpend" is set
        if (params["minLifeSpend"] == null) {
            throw new Error("Missing required parameter minLifeSpend when calling keyMetricsGetCohortsByFirstOrder");
        }
        var baseUrl = "/api/admin/cohorts/byFirstOrder";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "startMonth": params["startMonth"],
            "startYear": params["startYear"],
            "minLifeSpend": params["minLifeSpend"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param utmCampaign
     * @param utmSource
     * @param utmMedium
     */
    keyMetricsGetLtvReport: function (params, options) {
        var baseUrl = "/api/admin/report/ltv";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "utmCampaign": params["utmCampaign"],
            "utmSource": params["utmSource"],
            "utmMedium": params["utmMedium"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param startDate
     * @param endDate
     */
    keyMetricsGet_2: function (params, options) {
        // verify required parameter "startDate" is set
        if (params["startDate"] == null) {
            throw new Error("Missing required parameter startDate when calling keyMetricsGet_2");
        }
        // verify required parameter "endDate" is set
        if (params["endDate"] == null) {
            throw new Error("Missing required parameter endDate when calling keyMetricsGet_2");
        }
        var baseUrl = "/api/admin/keymetrics";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "startDate": params["startDate"],
            "endDate": params["endDate"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * KeyMetricsApi - functional programming interface
 */
exports.KeyMetricsApiFp = {
    /**
     * @param utmCampaign
     * @param utmSource
     * @param utmMedium
     */
    keyMetricsGet: function (params, options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    keyMetricsGetAdminReportBuyToShip: function (options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetAdminReportBuyToShip(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    keyMetricsGetAdminReportOfferStats: function (options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetAdminReportOfferStats(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param reportName
     * @param startDate
     * @param endDate
     */
    keyMetricsGetAdminReportOfferStats_1: function (params, options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetAdminReportOfferStats_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param promoCode
     */
    keyMetricsGetAdminReportPromo: function (params, options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetAdminReportPromo(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    keyMetricsGetCohortAnalysis: function (options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetCohortAnalysis(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param startMonth
     * @param startYear
     * @param minLifeSpend
     */
    keyMetricsGetCohortsByFirstOrder: function (params, options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetCohortsByFirstOrder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param utmCampaign
     * @param utmSource
     * @param utmMedium
     */
    keyMetricsGetLtvReport: function (params, options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGetLtvReport(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param startDate
     * @param endDate
     */
    keyMetricsGet_2: function (params, options) {
        var fetchArgs = exports.KeyMetricsApiFetchParamCreator.keyMetricsGet_2(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * KeyMetricsApi - object-oriented interface
 */
var KeyMetricsApi = (function (_super) {
    __extends(KeyMetricsApi, _super);
    function KeyMetricsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param utmCampaign
     * @param utmSource
     * @param utmMedium
     */
    KeyMetricsApi.prototype.keyMetricsGet = function (params, options) {
        return exports.KeyMetricsApiFp.keyMetricsGet(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    KeyMetricsApi.prototype.keyMetricsGetAdminReportBuyToShip = function (options) {
        return exports.KeyMetricsApiFp.keyMetricsGetAdminReportBuyToShip(options)(this.fetch, this.basePath);
    };
    /**
     */
    KeyMetricsApi.prototype.keyMetricsGetAdminReportOfferStats = function (options) {
        return exports.KeyMetricsApiFp.keyMetricsGetAdminReportOfferStats(options)(this.fetch, this.basePath);
    };
    /**
     * @param reportName
     * @param startDate
     * @param endDate
     */
    KeyMetricsApi.prototype.keyMetricsGetAdminReportOfferStats_1 = function (params, options) {
        return exports.KeyMetricsApiFp.keyMetricsGetAdminReportOfferStats_1(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param promoCode
     */
    KeyMetricsApi.prototype.keyMetricsGetAdminReportPromo = function (params, options) {
        return exports.KeyMetricsApiFp.keyMetricsGetAdminReportPromo(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    KeyMetricsApi.prototype.keyMetricsGetCohortAnalysis = function (options) {
        return exports.KeyMetricsApiFp.keyMetricsGetCohortAnalysis(options)(this.fetch, this.basePath);
    };
    /**
     * @param startMonth
     * @param startYear
     * @param minLifeSpend
     */
    KeyMetricsApi.prototype.keyMetricsGetCohortsByFirstOrder = function (params, options) {
        return exports.KeyMetricsApiFp.keyMetricsGetCohortsByFirstOrder(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param utmCampaign
     * @param utmSource
     * @param utmMedium
     */
    KeyMetricsApi.prototype.keyMetricsGetLtvReport = function (params, options) {
        return exports.KeyMetricsApiFp.keyMetricsGetLtvReport(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param startDate
     * @param endDate
     */
    KeyMetricsApi.prototype.keyMetricsGet_2 = function (params, options) {
        return exports.KeyMetricsApiFp.keyMetricsGet_2(params, options)(this.fetch, this.basePath);
    };
    return KeyMetricsApi;
}(BaseAPI));
exports.KeyMetricsApi = KeyMetricsApi;
;
/**
 * KeyMetricsApi - factory interface
 */
exports.KeyMetricsApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param utmCampaign
         * @param utmSource
         * @param utmMedium
         */
        keyMetricsGet: function (params, options) {
            return exports.KeyMetricsApiFp.keyMetricsGet(params, options)(fetch, basePath);
        },
        /**
         */
        keyMetricsGetAdminReportBuyToShip: function (options) {
            return exports.KeyMetricsApiFp.keyMetricsGetAdminReportBuyToShip(options)(fetch, basePath);
        },
        /**
         */
        keyMetricsGetAdminReportOfferStats: function (options) {
            return exports.KeyMetricsApiFp.keyMetricsGetAdminReportOfferStats(options)(fetch, basePath);
        },
        /**
         * @param reportName
         * @param startDate
         * @param endDate
         */
        keyMetricsGetAdminReportOfferStats_1: function (params, options) {
            return exports.KeyMetricsApiFp.keyMetricsGetAdminReportOfferStats_1(params, options)(fetch, basePath);
        },
        /**
         * @param promoCode
         */
        keyMetricsGetAdminReportPromo: function (params, options) {
            return exports.KeyMetricsApiFp.keyMetricsGetAdminReportPromo(params, options)(fetch, basePath);
        },
        /**
         */
        keyMetricsGetCohortAnalysis: function (options) {
            return exports.KeyMetricsApiFp.keyMetricsGetCohortAnalysis(options)(fetch, basePath);
        },
        /**
         * @param startMonth
         * @param startYear
         * @param minLifeSpend
         */
        keyMetricsGetCohortsByFirstOrder: function (params, options) {
            return exports.KeyMetricsApiFp.keyMetricsGetCohortsByFirstOrder(params, options)(fetch, basePath);
        },
        /**
         * @param utmCampaign
         * @param utmSource
         * @param utmMedium
         */
        keyMetricsGetLtvReport: function (params, options) {
            return exports.KeyMetricsApiFp.keyMetricsGetLtvReport(params, options)(fetch, basePath);
        },
        /**
         * @param startDate
         * @param endDate
         */
        keyMetricsGet_2: function (params, options) {
            return exports.KeyMetricsApiFp.keyMetricsGet_2(params, options)(fetch, basePath);
        },
    };
};
/**
 * ManifestAdminApi - fetch parameter creator
 */
exports.ManifestAdminApiFetchParamCreator = {
    /**
     * @param userId
     * @param shipped
     * @param skip
     * @param take
     */
    manifestAdminGet: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling manifestAdminGet");
        }
        // verify required parameter "shipped" is set
        if (params["shipped"] == null) {
            throw new Error("Missing required parameter shipped when calling manifestAdminGet");
        }
        var baseUrl = "/api/admin/manifests/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params["userId"],
            "shipped": params["shipped"],
            "skip": params["skip"],
            "take": params["take"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    manifestAdminGetClaimGiftManifest: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling manifestAdminGetClaimGiftManifest");
        }
        var baseUrl = "/api/admin/manifests/claimGiftCard";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params["id"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param manifestId
     * @param isSuspended
     * @param reason
     */
    manifestAdminGetSuspend: function (params, options) {
        // verify required parameter "manifestId" is set
        if (params["manifestId"] == null) {
            throw new Error("Missing required parameter manifestId when calling manifestAdminGetSuspend");
        }
        // verify required parameter "isSuspended" is set
        if (params["isSuspended"] == null) {
            throw new Error("Missing required parameter isSuspended when calling manifestAdminGetSuspend");
        }
        // verify required parameter "reason" is set
        if (params["reason"] == null) {
            throw new Error("Missing required parameter reason when calling manifestAdminGetSuspend");
        }
        var baseUrl = "/api/admin/manifests/{manifestId}/suspend"
            .replace("{" + "manifestId" + "}", "" + params["manifestId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "isSuspended": params["isSuspended"],
            "reason": params["reason"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ManifestAdminApi - functional programming interface
 */
exports.ManifestAdminApiFp = {
    /**
     * @param userId
     * @param shipped
     * @param skip
     * @param take
     */
    manifestAdminGet: function (params, options) {
        var fetchArgs = exports.ManifestAdminApiFetchParamCreator.manifestAdminGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    manifestAdminGetClaimGiftManifest: function (params, options) {
        var fetchArgs = exports.ManifestAdminApiFetchParamCreator.manifestAdminGetClaimGiftManifest(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param manifestId
     * @param isSuspended
     * @param reason
     */
    manifestAdminGetSuspend: function (params, options) {
        var fetchArgs = exports.ManifestAdminApiFetchParamCreator.manifestAdminGetSuspend(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ManifestAdminApi - object-oriented interface
 */
var ManifestAdminApi = (function (_super) {
    __extends(ManifestAdminApi, _super);
    function ManifestAdminApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param userId
     * @param shipped
     * @param skip
     * @param take
     */
    ManifestAdminApi.prototype.manifestAdminGet = function (params, options) {
        return exports.ManifestAdminApiFp.manifestAdminGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    ManifestAdminApi.prototype.manifestAdminGetClaimGiftManifest = function (params, options) {
        return exports.ManifestAdminApiFp.manifestAdminGetClaimGiftManifest(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param manifestId
     * @param isSuspended
     * @param reason
     */
    ManifestAdminApi.prototype.manifestAdminGetSuspend = function (params, options) {
        return exports.ManifestAdminApiFp.manifestAdminGetSuspend(params, options)(this.fetch, this.basePath);
    };
    return ManifestAdminApi;
}(BaseAPI));
exports.ManifestAdminApi = ManifestAdminApi;
;
/**
 * ManifestAdminApi - factory interface
 */
exports.ManifestAdminApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param userId
         * @param shipped
         * @param skip
         * @param take
         */
        manifestAdminGet: function (params, options) {
            return exports.ManifestAdminApiFp.manifestAdminGet(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        manifestAdminGetClaimGiftManifest: function (params, options) {
            return exports.ManifestAdminApiFp.manifestAdminGetClaimGiftManifest(params, options)(fetch, basePath);
        },
        /**
         * @param manifestId
         * @param isSuspended
         * @param reason
         */
        manifestAdminGetSuspend: function (params, options) {
            return exports.ManifestAdminApiFp.manifestAdminGetSuspend(params, options)(fetch, basePath);
        },
    };
};
/**
 * OfferApi - fetch parameter creator
 */
exports.OfferApiFetchParamCreator = {
    /**
     * @param offerSef
     */
    offerGetDetail: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerGetDetail");
        }
        var baseUrl = "/api/v2/offer/{offerSef}"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerGetLiveFeed: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerGetLiveFeed");
        }
        var baseUrl = "/api/v2/offer/{offerSef}/feed"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    offerHandleListAppellation: function (options) {
        var baseUrl = "/api/v2/appellation";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    offerHandleListRegion: function (options) {
        var baseUrl = "/api/v2/region";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     * @param id
     */
    offerHttpDeleteAdminV2OfferItemGroupById: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpDeleteAdminV2OfferItemGroupById");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling offerHttpDeleteAdminV2OfferItemGroupById");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/itemgroup/{id}"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"])
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param search
     */
    offerHttpGetAdminV2Offer: function (params, options) {
        // verify required parameter "search" is set
        if (params["search"] == null) {
            throw new Error("Missing required parameter search when calling offerHttpGetAdminV2Offer");
        }
        var baseUrl = "/api/v2/admin/offer";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     * @param id
     */
    offerHttpGetAdminV2OfferItemGroupById: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpGetAdminV2OfferItemGroupById");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling offerHttpGetAdminV2OfferItemGroupById");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/itemgroup/{id}"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"])
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferManifest: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpGetAdminV2OfferManifest");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/manifest"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferOverview: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpGetAdminV2OfferOverview");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/overview"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferSef: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpGetAdminV2OfferSef");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferSkuList: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpGetAdminV2OfferSkuList");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/sku"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferSkuSales: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpGetAdminV2OfferSkuSales");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/sku/sales"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param entity
     */
    offerHttpPostAdminV2Offer: function (params, options) {
        // verify required parameter "entity" is set
        if (params["entity"] == null) {
            throw new Error("Missing required parameter entity when calling offerHttpPostAdminV2Offer");
        }
        var baseUrl = "/api/v2/admin/offer";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["entity"]) {
            fetchOptions.body = JSON.stringify(params["entity"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     * @param itemGroupToAdd
     */
    offerHttpPostAdminV2OfferSkuList: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpPostAdminV2OfferSkuList");
        }
        // verify required parameter "itemGroupToAdd" is set
        if (params["itemGroupToAdd"] == null) {
            throw new Error("Missing required parameter itemGroupToAdd when calling offerHttpPostAdminV2OfferSkuList");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/sku"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["itemGroupToAdd"]) {
            fetchOptions.body = JSON.stringify(params["itemGroupToAdd"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     * @param id
     * @param itemGroup
     */
    offerHttpPutAdminV2OfferItemGroupById: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpPutAdminV2OfferItemGroupById");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling offerHttpPutAdminV2OfferItemGroupById");
        }
        // verify required parameter "itemGroup" is set
        if (params["itemGroup"] == null) {
            throw new Error("Missing required parameter itemGroup when calling offerHttpPutAdminV2OfferItemGroupById");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}/itemgroup/{id}"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"])
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["itemGroup"]) {
            fetchOptions.body = JSON.stringify(params["itemGroup"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     * @param model
     */
    offerHttpPutAdminV2OfferSef: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerHttpPutAdminV2OfferSef");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling offerHttpPutAdminV2OfferSef");
        }
        var baseUrl = "/api/v2/admin/offer/{offerSef}"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param filter
     * @param skip
     * @param take
     * @param forcePopulate
     * @param search
     */
    offerOfferListHandler: function (params, options) {
        var baseUrl = "/api/v2/offer";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "filter": params["filter"],
            "skip": params["skip"],
            "take": params["take"],
            "forcePopulate": params["forcePopulate"],
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * OfferApi - functional programming interface
 */
exports.OfferApiFp = {
    /**
     * @param offerSef
     */
    offerGetDetail: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerGetDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerGetLiveFeed: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerGetLiveFeed(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    offerHandleListAppellation: function (options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHandleListAppellation(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    offerHandleListRegion: function (options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHandleListRegion(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     * @param id
     */
    offerHttpDeleteAdminV2OfferItemGroupById: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpDeleteAdminV2OfferItemGroupById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param search
     */
    offerHttpGetAdminV2Offer: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2Offer(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     * @param id
     */
    offerHttpGetAdminV2OfferItemGroupById: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2OfferItemGroupById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferManifest: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2OfferManifest(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferOverview: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2OfferOverview(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferSef: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2OfferSef(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferSkuList: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2OfferSkuList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerHttpGetAdminV2OfferSkuSales: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpGetAdminV2OfferSkuSales(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param entity
     */
    offerHttpPostAdminV2Offer: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpPostAdminV2Offer(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     * @param itemGroupToAdd
     */
    offerHttpPostAdminV2OfferSkuList: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpPostAdminV2OfferSkuList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     * @param id
     * @param itemGroup
     */
    offerHttpPutAdminV2OfferItemGroupById: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpPutAdminV2OfferItemGroupById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     * @param model
     */
    offerHttpPutAdminV2OfferSef: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerHttpPutAdminV2OfferSef(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param filter
     * @param skip
     * @param take
     * @param forcePopulate
     * @param search
     */
    offerOfferListHandler: function (params, options) {
        var fetchArgs = exports.OfferApiFetchParamCreator.offerOfferListHandler(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * OfferApi - object-oriented interface
 */
var OfferApi = (function (_super) {
    __extends(OfferApi, _super);
    function OfferApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerGetDetail = function (params, options) {
        return exports.OfferApiFp.offerGetDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerGetLiveFeed = function (params, options) {
        return exports.OfferApiFp.offerGetLiveFeed(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    OfferApi.prototype.offerHandleListAppellation = function (options) {
        return exports.OfferApiFp.offerHandleListAppellation(options)(this.fetch, this.basePath);
    };
    /**
     */
    OfferApi.prototype.offerHandleListRegion = function (options) {
        return exports.OfferApiFp.offerHandleListRegion(options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     * @param id
     */
    OfferApi.prototype.offerHttpDeleteAdminV2OfferItemGroupById = function (params, options) {
        return exports.OfferApiFp.offerHttpDeleteAdminV2OfferItemGroupById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param search
     */
    OfferApi.prototype.offerHttpGetAdminV2Offer = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2Offer(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     * @param id
     */
    OfferApi.prototype.offerHttpGetAdminV2OfferItemGroupById = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2OfferItemGroupById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerHttpGetAdminV2OfferManifest = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2OfferManifest(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerHttpGetAdminV2OfferOverview = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2OfferOverview(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerHttpGetAdminV2OfferSef = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2OfferSef(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerHttpGetAdminV2OfferSkuList = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2OfferSkuList(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferApi.prototype.offerHttpGetAdminV2OfferSkuSales = function (params, options) {
        return exports.OfferApiFp.offerHttpGetAdminV2OfferSkuSales(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param entity
     */
    OfferApi.prototype.offerHttpPostAdminV2Offer = function (params, options) {
        return exports.OfferApiFp.offerHttpPostAdminV2Offer(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     * @param itemGroupToAdd
     */
    OfferApi.prototype.offerHttpPostAdminV2OfferSkuList = function (params, options) {
        return exports.OfferApiFp.offerHttpPostAdminV2OfferSkuList(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     * @param id
     * @param itemGroup
     */
    OfferApi.prototype.offerHttpPutAdminV2OfferItemGroupById = function (params, options) {
        return exports.OfferApiFp.offerHttpPutAdminV2OfferItemGroupById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     * @param model
     */
    OfferApi.prototype.offerHttpPutAdminV2OfferSef = function (params, options) {
        return exports.OfferApiFp.offerHttpPutAdminV2OfferSef(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param filter
     * @param skip
     * @param take
     * @param forcePopulate
     * @param search
     */
    OfferApi.prototype.offerOfferListHandler = function (params, options) {
        return exports.OfferApiFp.offerOfferListHandler(params, options)(this.fetch, this.basePath);
    };
    return OfferApi;
}(BaseAPI));
exports.OfferApi = OfferApi;
;
/**
 * OfferApi - factory interface
 */
exports.OfferApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param offerSef
         */
        offerGetDetail: function (params, options) {
            return exports.OfferApiFp.offerGetDetail(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerGetLiveFeed: function (params, options) {
            return exports.OfferApiFp.offerGetLiveFeed(params, options)(fetch, basePath);
        },
        /**
         */
        offerHandleListAppellation: function (options) {
            return exports.OfferApiFp.offerHandleListAppellation(options)(fetch, basePath);
        },
        /**
         */
        offerHandleListRegion: function (options) {
            return exports.OfferApiFp.offerHandleListRegion(options)(fetch, basePath);
        },
        /**
         * @param offerSef
         * @param id
         */
        offerHttpDeleteAdminV2OfferItemGroupById: function (params, options) {
            return exports.OfferApiFp.offerHttpDeleteAdminV2OfferItemGroupById(params, options)(fetch, basePath);
        },
        /**
         * @param search
         */
        offerHttpGetAdminV2Offer: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2Offer(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         * @param id
         */
        offerHttpGetAdminV2OfferItemGroupById: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2OfferItemGroupById(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerHttpGetAdminV2OfferManifest: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2OfferManifest(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerHttpGetAdminV2OfferOverview: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2OfferOverview(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerHttpGetAdminV2OfferSef: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2OfferSef(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerHttpGetAdminV2OfferSkuList: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2OfferSkuList(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerHttpGetAdminV2OfferSkuSales: function (params, options) {
            return exports.OfferApiFp.offerHttpGetAdminV2OfferSkuSales(params, options)(fetch, basePath);
        },
        /**
         * @param entity
         */
        offerHttpPostAdminV2Offer: function (params, options) {
            return exports.OfferApiFp.offerHttpPostAdminV2Offer(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         * @param itemGroupToAdd
         */
        offerHttpPostAdminV2OfferSkuList: function (params, options) {
            return exports.OfferApiFp.offerHttpPostAdminV2OfferSkuList(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         * @param id
         * @param itemGroup
         */
        offerHttpPutAdminV2OfferItemGroupById: function (params, options) {
            return exports.OfferApiFp.offerHttpPutAdminV2OfferItemGroupById(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         * @param model
         */
        offerHttpPutAdminV2OfferSef: function (params, options) {
            return exports.OfferApiFp.offerHttpPutAdminV2OfferSef(params, options)(fetch, basePath);
        },
        /**
         * @param filter
         * @param skip
         * @param take
         * @param forcePopulate
         * @param search
         */
        offerOfferListHandler: function (params, options) {
            return exports.OfferApiFp.offerOfferListHandler(params, options)(fetch, basePath);
        },
    };
};
/**
 * OfferDetailApi - fetch parameter creator
 */
exports.OfferDetailApiFetchParamCreator = {
    /**
     * @param offerSef
     */
    offerDetailGetLiveFeedDetail: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerDetailGetLiveFeedDetail");
        }
        var baseUrl = "/api/offer/detail/{offerSef}/feed"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerDetailGetOfferBottles: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerDetailGetOfferBottles");
        }
        var baseUrl = "/api/offer/detail/{offerSef}/bottles"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    offerDetailGetOfferDetailBasic: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling offerDetailGetOfferDetailBasic");
        }
        var baseUrl = "/api/offer/detail/{offerSef}/basic"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param file
     */
    offerDetailPostOfferUploadImage: function (params, options) {
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling offerDetailPostOfferUploadImage");
        }
        var baseUrl = "/api/offer/detail/uploadImage";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "file": params["file"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    offerDetailSitemapIndex: function (options) {
        var baseUrl = "/api/offer/sitemapIndex";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * OfferDetailApi - functional programming interface
 */
exports.OfferDetailApiFp = {
    /**
     * @param offerSef
     */
    offerDetailGetLiveFeedDetail: function (params, options) {
        var fetchArgs = exports.OfferDetailApiFetchParamCreator.offerDetailGetLiveFeedDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerDetailGetOfferBottles: function (params, options) {
        var fetchArgs = exports.OfferDetailApiFetchParamCreator.offerDetailGetOfferBottles(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    offerDetailGetOfferDetailBasic: function (params, options) {
        var fetchArgs = exports.OfferDetailApiFetchParamCreator.offerDetailGetOfferDetailBasic(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param file
     */
    offerDetailPostOfferUploadImage: function (params, options) {
        var fetchArgs = exports.OfferDetailApiFetchParamCreator.offerDetailPostOfferUploadImage(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    offerDetailSitemapIndex: function (options) {
        var fetchArgs = exports.OfferDetailApiFetchParamCreator.offerDetailSitemapIndex(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * OfferDetailApi - object-oriented interface
 */
var OfferDetailApi = (function (_super) {
    __extends(OfferDetailApi, _super);
    function OfferDetailApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param offerSef
     */
    OfferDetailApi.prototype.offerDetailGetLiveFeedDetail = function (params, options) {
        return exports.OfferDetailApiFp.offerDetailGetLiveFeedDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferDetailApi.prototype.offerDetailGetOfferBottles = function (params, options) {
        return exports.OfferDetailApiFp.offerDetailGetOfferBottles(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    OfferDetailApi.prototype.offerDetailGetOfferDetailBasic = function (params, options) {
        return exports.OfferDetailApiFp.offerDetailGetOfferDetailBasic(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param file
     */
    OfferDetailApi.prototype.offerDetailPostOfferUploadImage = function (params, options) {
        return exports.OfferDetailApiFp.offerDetailPostOfferUploadImage(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    OfferDetailApi.prototype.offerDetailSitemapIndex = function (options) {
        return exports.OfferDetailApiFp.offerDetailSitemapIndex(options)(this.fetch, this.basePath);
    };
    return OfferDetailApi;
}(BaseAPI));
exports.OfferDetailApi = OfferDetailApi;
;
/**
 * OfferDetailApi - factory interface
 */
exports.OfferDetailApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param offerSef
         */
        offerDetailGetLiveFeedDetail: function (params, options) {
            return exports.OfferDetailApiFp.offerDetailGetLiveFeedDetail(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerDetailGetOfferBottles: function (params, options) {
            return exports.OfferDetailApiFp.offerDetailGetOfferBottles(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        offerDetailGetOfferDetailBasic: function (params, options) {
            return exports.OfferDetailApiFp.offerDetailGetOfferDetailBasic(params, options)(fetch, basePath);
        },
        /**
         * @param file
         */
        offerDetailPostOfferUploadImage: function (params, options) {
            return exports.OfferDetailApiFp.offerDetailPostOfferUploadImage(params, options)(fetch, basePath);
        },
        /**
         */
        offerDetailSitemapIndex: function (options) {
            return exports.OfferDetailApiFp.offerDetailSitemapIndex(options)(fetch, basePath);
        },
    };
};
/**
 * OrderStatusApi - fetch parameter creator
 */
exports.OrderStatusApiFetchParamCreator = {
    /**
     * @param userId
     */
    orderStatusGet: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling orderStatusGet");
        }
        var baseUrl = "/api/user/{userId}/referral"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param orderId
     */
    orderStatusGetOrder: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling orderStatusGetOrder");
        }
        // verify required parameter "orderId" is set
        if (params["orderId"] == null) {
            throw new Error("Missing required parameter orderId when calling orderStatusGetOrder");
        }
        var baseUrl = "/api/user/{userGuid}/order/{orderId}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"])
            .replace("{" + "orderId" + "}", "" + params["orderId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    orderStatusGetOrders: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling orderStatusGetOrders");
        }
        var baseUrl = "/api/user/{userGuid}/order"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * OrderStatusApi - functional programming interface
 */
exports.OrderStatusApiFp = {
    /**
     * @param userId
     */
    orderStatusGet: function (params, options) {
        var fetchArgs = exports.OrderStatusApiFetchParamCreator.orderStatusGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param orderId
     */
    orderStatusGetOrder: function (params, options) {
        var fetchArgs = exports.OrderStatusApiFetchParamCreator.orderStatusGetOrder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    orderStatusGetOrders: function (params, options) {
        var fetchArgs = exports.OrderStatusApiFetchParamCreator.orderStatusGetOrders(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * OrderStatusApi - object-oriented interface
 */
var OrderStatusApi = (function (_super) {
    __extends(OrderStatusApi, _super);
    function OrderStatusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param userId
     */
    OrderStatusApi.prototype.orderStatusGet = function (params, options) {
        return exports.OrderStatusApiFp.orderStatusGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param orderId
     */
    OrderStatusApi.prototype.orderStatusGetOrder = function (params, options) {
        return exports.OrderStatusApiFp.orderStatusGetOrder(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    OrderStatusApi.prototype.orderStatusGetOrders = function (params, options) {
        return exports.OrderStatusApiFp.orderStatusGetOrders(params, options)(this.fetch, this.basePath);
    };
    return OrderStatusApi;
}(BaseAPI));
exports.OrderStatusApi = OrderStatusApi;
;
/**
 * OrderStatusApi - factory interface
 */
exports.OrderStatusApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param userId
         */
        orderStatusGet: function (params, options) {
            return exports.OrderStatusApiFp.orderStatusGet(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param orderId
         */
        orderStatusGetOrder: function (params, options) {
            return exports.OrderStatusApiFp.orderStatusGetOrder(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        orderStatusGetOrders: function (params, options) {
            return exports.OrderStatusApiFp.orderStatusGetOrders(params, options)(fetch, basePath);
        },
    };
};
/**
 * PageApi - fetch parameter creator
 */
exports.PageApiFetchParamCreator = {
    /**
     * @param search
     * @param onlyPublished
     */
    pageGetPage: function (params, options) {
        var baseUrl = "/api/page";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "search": params["search"],
            "onlyPublished": params["onlyPublished"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    pageGetPageById: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling pageGetPageById");
        }
        var baseUrl = "/api/page/id/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param section
     * @param id
     */
    pageGetPageBySection: function (params, options) {
        // verify required parameter "section" is set
        if (params["section"] == null) {
            throw new Error("Missing required parameter section when calling pageGetPageBySection");
        }
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling pageGetPageBySection");
        }
        var baseUrl = "/api/page/section/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "section": params["section"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    pageGetSections: function (options) {
        var baseUrl = "/api/page/section";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param file
     */
    pagePostIPageUploadImage: function (params, options) {
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling pagePostIPageUploadImage");
        }
        var baseUrl = "/api/page/uploadimage";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "file": params["file"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    pagePublishPageVersion: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling pagePublishPageVersion");
        }
        var baseUrl = "/api/page";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PageApi - functional programming interface
 */
exports.PageApiFp = {
    /**
     * @param search
     * @param onlyPublished
     */
    pageGetPage: function (params, options) {
        var fetchArgs = exports.PageApiFetchParamCreator.pageGetPage(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    pageGetPageById: function (params, options) {
        var fetchArgs = exports.PageApiFetchParamCreator.pageGetPageById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param section
     * @param id
     */
    pageGetPageBySection: function (params, options) {
        var fetchArgs = exports.PageApiFetchParamCreator.pageGetPageBySection(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    pageGetSections: function (options) {
        var fetchArgs = exports.PageApiFetchParamCreator.pageGetSections(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param file
     */
    pagePostIPageUploadImage: function (params, options) {
        var fetchArgs = exports.PageApiFetchParamCreator.pagePostIPageUploadImage(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    pagePublishPageVersion: function (params, options) {
        var fetchArgs = exports.PageApiFetchParamCreator.pagePublishPageVersion(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PageApi - object-oriented interface
 */
var PageApi = (function (_super) {
    __extends(PageApi, _super);
    function PageApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param search
     * @param onlyPublished
     */
    PageApi.prototype.pageGetPage = function (params, options) {
        return exports.PageApiFp.pageGetPage(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    PageApi.prototype.pageGetPageById = function (params, options) {
        return exports.PageApiFp.pageGetPageById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param section
     * @param id
     */
    PageApi.prototype.pageGetPageBySection = function (params, options) {
        return exports.PageApiFp.pageGetPageBySection(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    PageApi.prototype.pageGetSections = function (options) {
        return exports.PageApiFp.pageGetSections(options)(this.fetch, this.basePath);
    };
    /**
     * @param file
     */
    PageApi.prototype.pagePostIPageUploadImage = function (params, options) {
        return exports.PageApiFp.pagePostIPageUploadImage(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    PageApi.prototype.pagePublishPageVersion = function (params, options) {
        return exports.PageApiFp.pagePublishPageVersion(params, options)(this.fetch, this.basePath);
    };
    return PageApi;
}(BaseAPI));
exports.PageApi = PageApi;
;
/**
 * PageApi - factory interface
 */
exports.PageApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param search
         * @param onlyPublished
         */
        pageGetPage: function (params, options) {
            return exports.PageApiFp.pageGetPage(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        pageGetPageById: function (params, options) {
            return exports.PageApiFp.pageGetPageById(params, options)(fetch, basePath);
        },
        /**
         * @param section
         * @param id
         */
        pageGetPageBySection: function (params, options) {
            return exports.PageApiFp.pageGetPageBySection(params, options)(fetch, basePath);
        },
        /**
         */
        pageGetSections: function (options) {
            return exports.PageApiFp.pageGetSections(options)(fetch, basePath);
        },
        /**
         * @param file
         */
        pagePostIPageUploadImage: function (params, options) {
            return exports.PageApiFp.pagePostIPageUploadImage(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        pagePublishPageVersion: function (params, options) {
            return exports.PageApiFp.pagePublishPageVersion(params, options)(fetch, basePath);
        },
    };
};
/**
 * PaymentApi - fetch parameter creator
 */
exports.PaymentApiFetchParamCreator = {
    /**
     * @param sessionId
     */
    paymentGetAddressAndPayment: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentGetAddressAndPayment");
        }
        var baseUrl = "/api/session/{sessionId}/user-address-and-payment"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Convenience method to create both an address and payment entry. Will reuse existing address if a match already  exists in the user&#39;s profile.
     * @param sessionId Session identifier.
     * @param model Specify address and payment to add.
     */
    paymentPostAddressAndPayment: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentPostAddressAndPayment");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling paymentPostAddressAndPayment");
        }
        var baseUrl = "/api/session/{sessionId}/user-address-and-payment"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Delete an authenticated user&#39;s payment profile. Also removes the profile from CIM.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     */
    paymentSessionDeletePayment: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentSessionDeletePayment");
        }
        // verify required parameter "paymentProfileId" is set
        if (params["paymentProfileId"] == null) {
            throw new Error("Missing required parameter paymentProfileId when calling paymentSessionDeletePayment");
        }
        var baseUrl = "/api/session/{sessionId}/user-payment/{paymentProfileId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "paymentProfileId" + "}", "" + params["paymentProfileId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets a detailed payment profile for the authenticated user.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     */
    paymentSessionGetPaymentById: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentSessionGetPaymentById");
        }
        // verify required parameter "paymentProfileId" is set
        if (params["paymentProfileId"] == null) {
            throw new Error("Missing required parameter paymentProfileId when calling paymentSessionGetPaymentById");
        }
        var baseUrl = "/api/session/{sessionId}/user-payment/{paymentProfileId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "paymentProfileId" + "}", "" + params["paymentProfileId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets a list of payment profiles for the authenticated user.
     * @param sessionId The session token of the logged-in user.
     */
    paymentSessionGetPayments: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentSessionGetPayments");
        }
        var baseUrl = "/api/session/{sessionId}/user-payment"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets a list of payment profiles for the authenticated user.
     * @param sessionId The session token of the logged-in user.
     */
    paymentSessionGetPaymentsList: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentSessionGetPaymentsList");
        }
        var baseUrl = "/api/session/{sessionId}/user-payment/list"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Creates a new payment entity in the authenticated user&#39;s profile. Also creates the payment entity in CIM. The  Address entity should have already been created.
     * @param sessionId Session identifier.
     * @param ccinfo Ccinfo.
     */
    paymentSessionPostPayment: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentSessionPostPayment");
        }
        // verify required parameter "ccinfo" is set
        if (params["ccinfo"] == null) {
            throw new Error("Missing required parameter ccinfo when calling paymentSessionPostPayment");
        }
        var baseUrl = "/api/session/{sessionId}/user-payment"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ccinfo"]) {
            fetchOptions.body = JSON.stringify(params["ccinfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Update a user&#39;s payment profile. Also updates CIM.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     * @param newInfo New payment info.
     */
    paymentSessionUpdatePayment: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling paymentSessionUpdatePayment");
        }
        // verify required parameter "paymentProfileId" is set
        if (params["paymentProfileId"] == null) {
            throw new Error("Missing required parameter paymentProfileId when calling paymentSessionUpdatePayment");
        }
        // verify required parameter "newInfo" is set
        if (params["newInfo"] == null) {
            throw new Error("Missing required parameter newInfo when calling paymentSessionUpdatePayment");
        }
        var baseUrl = "/api/session/{sessionId}/user-payment/{paymentProfileId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "paymentProfileId" + "}", "" + params["paymentProfileId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["newInfo"]) {
            fetchOptions.body = JSON.stringify(params["newInfo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PaymentApi - functional programming interface
 */
exports.PaymentApiFp = {
    /**
     * @param sessionId
     */
    paymentGetAddressAndPayment: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentGetAddressAndPayment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Convenience method to create both an address and payment entry. Will reuse existing address if a match already  exists in the user&#39;s profile.
     * @param sessionId Session identifier.
     * @param model Specify address and payment to add.
     */
    paymentPostAddressAndPayment: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentPostAddressAndPayment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Delete an authenticated user&#39;s payment profile. Also removes the profile from CIM.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     */
    paymentSessionDeletePayment: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentSessionDeletePayment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets a detailed payment profile for the authenticated user.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     */
    paymentSessionGetPaymentById: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentSessionGetPaymentById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets a list of payment profiles for the authenticated user.
     * @param sessionId The session token of the logged-in user.
     */
    paymentSessionGetPayments: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentSessionGetPayments(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets a list of payment profiles for the authenticated user.
     * @param sessionId The session token of the logged-in user.
     */
    paymentSessionGetPaymentsList: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentSessionGetPaymentsList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Creates a new payment entity in the authenticated user&#39;s profile. Also creates the payment entity in CIM. The  Address entity should have already been created.
     * @param sessionId Session identifier.
     * @param ccinfo Ccinfo.
     */
    paymentSessionPostPayment: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentSessionPostPayment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Update a user&#39;s payment profile. Also updates CIM.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     * @param newInfo New payment info.
     */
    paymentSessionUpdatePayment: function (params, options) {
        var fetchArgs = exports.PaymentApiFetchParamCreator.paymentSessionUpdatePayment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PaymentApi - object-oriented interface
 */
var PaymentApi = (function (_super) {
    __extends(PaymentApi, _super);
    function PaymentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param sessionId
     */
    PaymentApi.prototype.paymentGetAddressAndPayment = function (params, options) {
        return exports.PaymentApiFp.paymentGetAddressAndPayment(params, options)(this.fetch, this.basePath);
    };
    /**
     * Convenience method to create both an address and payment entry. Will reuse existing address if a match already  exists in the user&#39;s profile.
     * @param sessionId Session identifier.
     * @param model Specify address and payment to add.
     */
    PaymentApi.prototype.paymentPostAddressAndPayment = function (params, options) {
        return exports.PaymentApiFp.paymentPostAddressAndPayment(params, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an authenticated user&#39;s payment profile. Also removes the profile from CIM.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     */
    PaymentApi.prototype.paymentSessionDeletePayment = function (params, options) {
        return exports.PaymentApiFp.paymentSessionDeletePayment(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets a detailed payment profile for the authenticated user.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     */
    PaymentApi.prototype.paymentSessionGetPaymentById = function (params, options) {
        return exports.PaymentApiFp.paymentSessionGetPaymentById(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets a list of payment profiles for the authenticated user.
     * @param sessionId The session token of the logged-in user.
     */
    PaymentApi.prototype.paymentSessionGetPayments = function (params, options) {
        return exports.PaymentApiFp.paymentSessionGetPayments(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets a list of payment profiles for the authenticated user.
     * @param sessionId The session token of the logged-in user.
     */
    PaymentApi.prototype.paymentSessionGetPaymentsList = function (params, options) {
        return exports.PaymentApiFp.paymentSessionGetPaymentsList(params, options)(this.fetch, this.basePath);
    };
    /**
     * Creates a new payment entity in the authenticated user&#39;s profile. Also creates the payment entity in CIM. The  Address entity should have already been created.
     * @param sessionId Session identifier.
     * @param ccinfo Ccinfo.
     */
    PaymentApi.prototype.paymentSessionPostPayment = function (params, options) {
        return exports.PaymentApiFp.paymentSessionPostPayment(params, options)(this.fetch, this.basePath);
    };
    /**
     * Update a user&#39;s payment profile. Also updates CIM.
     * @param sessionId Session identifier.
     * @param paymentProfileId Payment profile identifier.
     * @param newInfo New payment info.
     */
    PaymentApi.prototype.paymentSessionUpdatePayment = function (params, options) {
        return exports.PaymentApiFp.paymentSessionUpdatePayment(params, options)(this.fetch, this.basePath);
    };
    return PaymentApi;
}(BaseAPI));
exports.PaymentApi = PaymentApi;
;
/**
 * PaymentApi - factory interface
 */
exports.PaymentApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param sessionId
         */
        paymentGetAddressAndPayment: function (params, options) {
            return exports.PaymentApiFp.paymentGetAddressAndPayment(params, options)(fetch, basePath);
        },
        /**
         * Convenience method to create both an address and payment entry. Will reuse existing address if a match already  exists in the user&#39;s profile.
         * @param sessionId Session identifier.
         * @param model Specify address and payment to add.
         */
        paymentPostAddressAndPayment: function (params, options) {
            return exports.PaymentApiFp.paymentPostAddressAndPayment(params, options)(fetch, basePath);
        },
        /**
         * Delete an authenticated user&#39;s payment profile. Also removes the profile from CIM.
         * @param sessionId Session identifier.
         * @param paymentProfileId Payment profile identifier.
         */
        paymentSessionDeletePayment: function (params, options) {
            return exports.PaymentApiFp.paymentSessionDeletePayment(params, options)(fetch, basePath);
        },
        /**
         * Gets a detailed payment profile for the authenticated user.
         * @param sessionId Session identifier.
         * @param paymentProfileId Payment profile identifier.
         */
        paymentSessionGetPaymentById: function (params, options) {
            return exports.PaymentApiFp.paymentSessionGetPaymentById(params, options)(fetch, basePath);
        },
        /**
         * Gets a list of payment profiles for the authenticated user.
         * @param sessionId The session token of the logged-in user.
         */
        paymentSessionGetPayments: function (params, options) {
            return exports.PaymentApiFp.paymentSessionGetPayments(params, options)(fetch, basePath);
        },
        /**
         * Gets a list of payment profiles for the authenticated user.
         * @param sessionId The session token of the logged-in user.
         */
        paymentSessionGetPaymentsList: function (params, options) {
            return exports.PaymentApiFp.paymentSessionGetPaymentsList(params, options)(fetch, basePath);
        },
        /**
         * Creates a new payment entity in the authenticated user&#39;s profile. Also creates the payment entity in CIM. The  Address entity should have already been created.
         * @param sessionId Session identifier.
         * @param ccinfo Ccinfo.
         */
        paymentSessionPostPayment: function (params, options) {
            return exports.PaymentApiFp.paymentSessionPostPayment(params, options)(fetch, basePath);
        },
        /**
         * Update a user&#39;s payment profile. Also updates CIM.
         * @param sessionId Session identifier.
         * @param paymentProfileId Payment profile identifier.
         * @param newInfo New payment info.
         */
        paymentSessionUpdatePayment: function (params, options) {
            return exports.PaymentApiFp.paymentSessionUpdatePayment(params, options)(fetch, basePath);
        },
    };
};
/**
 * PromoGroupApi - fetch parameter creator
 */
exports.PromoGroupApiFetchParamCreator = {
    /**
     * GET /api/promoGroup/
     */
    promoGroupGet: function (options) {
        var baseUrl = "/api/promogroup";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * GET /api/promoGroup/##
     * @param id id of the promo group to enumerate promo codes
     */
    promoGroupGet_1: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling promoGroupGet_1");
        }
        var baseUrl = "/api/promogroup/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PromoGroupApi - functional programming interface
 */
exports.PromoGroupApiFp = {
    /**
     * GET /api/promoGroup/
     */
    promoGroupGet: function (options) {
        var fetchArgs = exports.PromoGroupApiFetchParamCreator.promoGroupGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * GET /api/promoGroup/##
     * @param id id of the promo group to enumerate promo codes
     */
    promoGroupGet_1: function (params, options) {
        var fetchArgs = exports.PromoGroupApiFetchParamCreator.promoGroupGet_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PromoGroupApi - object-oriented interface
 */
var PromoGroupApi = (function (_super) {
    __extends(PromoGroupApi, _super);
    function PromoGroupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET /api/promoGroup/
     */
    PromoGroupApi.prototype.promoGroupGet = function (options) {
        return exports.PromoGroupApiFp.promoGroupGet(options)(this.fetch, this.basePath);
    };
    /**
     * GET /api/promoGroup/##
     * @param id id of the promo group to enumerate promo codes
     */
    PromoGroupApi.prototype.promoGroupGet_1 = function (params, options) {
        return exports.PromoGroupApiFp.promoGroupGet_1(params, options)(this.fetch, this.basePath);
    };
    return PromoGroupApi;
}(BaseAPI));
exports.PromoGroupApi = PromoGroupApi;
;
/**
 * PromoGroupApi - factory interface
 */
exports.PromoGroupApiFactory = function (fetch, basePath) {
    return {
        /**
         * GET /api/promoGroup/
         */
        promoGroupGet: function (options) {
            return exports.PromoGroupApiFp.promoGroupGet(options)(fetch, basePath);
        },
        /**
         * GET /api/promoGroup/##
         * @param id id of the promo group to enumerate promo codes
         */
        promoGroupGet_1: function (params, options) {
            return exports.PromoGroupApiFp.promoGroupGet_1(params, options)(fetch, basePath);
        },
    };
};
/**
 * PurchaseOrderApi - fetch parameter creator
 */
exports.PurchaseOrderApiFetchParamCreator = {
    /**
     * @param id
     * @param model
     */
    purchaseOrderCreateCplPurchaseOrder: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling purchaseOrderCreateCplPurchaseOrder");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling purchaseOrderCreateCplPurchaseOrder");
        }
        var baseUrl = "/api/v2/admin/po/id/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    purchaseOrderGetCplPurchaseOrderById: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling purchaseOrderGetCplPurchaseOrderById");
        }
        var baseUrl = "/api/v2/admin/po/cpl/id/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    purchaseOrderGetPurchaseOrderId: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling purchaseOrderGetPurchaseOrderId");
        }
        var baseUrl = "/api/v2/admin/po/id/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    purchaseOrderGetPurchaseOrderList: function (options) {
        var baseUrl = "/api/v2/admin/po/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     */
    purchaseOrderGetPurchaseOrders: function (params, options) {
        var baseUrl = "/api/v2/admin/po";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sku
     */
    purchaseOrderGetPurchaseOrdersForSku: function (params, options) {
        // verify required parameter "sku" is set
        if (params["sku"] == null) {
            throw new Error("Missing required parameter sku when calling purchaseOrderGetPurchaseOrdersForSku");
        }
        var baseUrl = "/api/v2/admin/po/sku/{sku}"
            .replace("{" + "sku" + "}", "" + params["sku"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    purchaseOrderPostPurchaseOrder: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling purchaseOrderPostPurchaseOrder");
        }
        var baseUrl = "/api/v2/admin/po";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PurchaseOrderApi - functional programming interface
 */
exports.PurchaseOrderApiFp = {
    /**
     * @param id
     * @param model
     */
    purchaseOrderCreateCplPurchaseOrder: function (params, options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderCreateCplPurchaseOrder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    purchaseOrderGetCplPurchaseOrderById: function (params, options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderGetCplPurchaseOrderById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    purchaseOrderGetPurchaseOrderId: function (params, options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderGetPurchaseOrderId(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    purchaseOrderGetPurchaseOrderList: function (options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderGetPurchaseOrderList(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     */
    purchaseOrderGetPurchaseOrders: function (params, options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderGetPurchaseOrders(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sku
     */
    purchaseOrderGetPurchaseOrdersForSku: function (params, options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderGetPurchaseOrdersForSku(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    purchaseOrderPostPurchaseOrder: function (params, options) {
        var fetchArgs = exports.PurchaseOrderApiFetchParamCreator.purchaseOrderPostPurchaseOrder(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PurchaseOrderApi - object-oriented interface
 */
var PurchaseOrderApi = (function (_super) {
    __extends(PurchaseOrderApi, _super);
    function PurchaseOrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param id
     * @param model
     */
    PurchaseOrderApi.prototype.purchaseOrderCreateCplPurchaseOrder = function (params, options) {
        return exports.PurchaseOrderApiFp.purchaseOrderCreateCplPurchaseOrder(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    PurchaseOrderApi.prototype.purchaseOrderGetCplPurchaseOrderById = function (params, options) {
        return exports.PurchaseOrderApiFp.purchaseOrderGetCplPurchaseOrderById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    PurchaseOrderApi.prototype.purchaseOrderGetPurchaseOrderId = function (params, options) {
        return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrderId(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    PurchaseOrderApi.prototype.purchaseOrderGetPurchaseOrderList = function (options) {
        return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrderList(options)(this.fetch, this.basePath);
    };
    /**
     * @param skip
     * @param take
     * @param search
     */
    PurchaseOrderApi.prototype.purchaseOrderGetPurchaseOrders = function (params, options) {
        return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrders(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sku
     */
    PurchaseOrderApi.prototype.purchaseOrderGetPurchaseOrdersForSku = function (params, options) {
        return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrdersForSku(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    PurchaseOrderApi.prototype.purchaseOrderPostPurchaseOrder = function (params, options) {
        return exports.PurchaseOrderApiFp.purchaseOrderPostPurchaseOrder(params, options)(this.fetch, this.basePath);
    };
    return PurchaseOrderApi;
}(BaseAPI));
exports.PurchaseOrderApi = PurchaseOrderApi;
;
/**
 * PurchaseOrderApi - factory interface
 */
exports.PurchaseOrderApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param id
         * @param model
         */
        purchaseOrderCreateCplPurchaseOrder: function (params, options) {
            return exports.PurchaseOrderApiFp.purchaseOrderCreateCplPurchaseOrder(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        purchaseOrderGetCplPurchaseOrderById: function (params, options) {
            return exports.PurchaseOrderApiFp.purchaseOrderGetCplPurchaseOrderById(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        purchaseOrderGetPurchaseOrderId: function (params, options) {
            return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrderId(params, options)(fetch, basePath);
        },
        /**
         */
        purchaseOrderGetPurchaseOrderList: function (options) {
            return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrderList(options)(fetch, basePath);
        },
        /**
         * @param skip
         * @param take
         * @param search
         */
        purchaseOrderGetPurchaseOrders: function (params, options) {
            return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrders(params, options)(fetch, basePath);
        },
        /**
         * @param sku
         */
        purchaseOrderGetPurchaseOrdersForSku: function (params, options) {
            return exports.PurchaseOrderApiFp.purchaseOrderGetPurchaseOrdersForSku(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        purchaseOrderPostPurchaseOrder: function (params, options) {
            return exports.PurchaseOrderApiFp.purchaseOrderPostPurchaseOrder(params, options)(fetch, basePath);
        },
    };
};
/**
 * SellerAdminApi - fetch parameter creator
 */
exports.SellerAdminApiFetchParamCreator = {
    /**
     * @param sellerId
     */
    sellerAdminDelete: function (params, options) {
        // verify required parameter "sellerId" is set
        if (params["sellerId"] == null) {
            throw new Error("Missing required parameter sellerId when calling sellerAdminDelete");
        }
        var baseUrl = "/api/v2/admin/seller/{sellerId}"
            .replace("{" + "sellerId" + "}", "" + params["sellerId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    sellerAdminGet: function (options) {
        var baseUrl = "/api/v2/admin/seller";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sellerId
     */
    sellerAdminGet_1: function (params, options) {
        // verify required parameter "sellerId" is set
        if (params["sellerId"] == null) {
            throw new Error("Missing required parameter sellerId when calling sellerAdminGet_1");
        }
        var baseUrl = "/api/v2/admin/seller/{sellerId}"
            .replace("{" + "sellerId" + "}", "" + params["sellerId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param content
     */
    sellerAdminPost: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling sellerAdminPost");
        }
        var baseUrl = "/api/v2/admin/seller";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param content
     * @param sellerId
     */
    sellerAdminPut: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling sellerAdminPut");
        }
        // verify required parameter "sellerId" is set
        if (params["sellerId"] == null) {
            throw new Error("Missing required parameter sellerId when calling sellerAdminPut");
        }
        var baseUrl = "/api/v2/admin/seller/{sellerId}"
            .replace("{" + "sellerId" + "}", "" + params["sellerId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SellerAdminApi - functional programming interface
 */
exports.SellerAdminApiFp = {
    /**
     * @param sellerId
     */
    sellerAdminDelete: function (params, options) {
        var fetchArgs = exports.SellerAdminApiFetchParamCreator.sellerAdminDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    sellerAdminGet: function (options) {
        var fetchArgs = exports.SellerAdminApiFetchParamCreator.sellerAdminGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sellerId
     */
    sellerAdminGet_1: function (params, options) {
        var fetchArgs = exports.SellerAdminApiFetchParamCreator.sellerAdminGet_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param content
     */
    sellerAdminPost: function (params, options) {
        var fetchArgs = exports.SellerAdminApiFetchParamCreator.sellerAdminPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param content
     * @param sellerId
     */
    sellerAdminPut: function (params, options) {
        var fetchArgs = exports.SellerAdminApiFetchParamCreator.sellerAdminPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * SellerAdminApi - object-oriented interface
 */
var SellerAdminApi = (function (_super) {
    __extends(SellerAdminApi, _super);
    function SellerAdminApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param sellerId
     */
    SellerAdminApi.prototype.sellerAdminDelete = function (params, options) {
        return exports.SellerAdminApiFp.sellerAdminDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    SellerAdminApi.prototype.sellerAdminGet = function (options) {
        return exports.SellerAdminApiFp.sellerAdminGet(options)(this.fetch, this.basePath);
    };
    /**
     * @param sellerId
     */
    SellerAdminApi.prototype.sellerAdminGet_1 = function (params, options) {
        return exports.SellerAdminApiFp.sellerAdminGet_1(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param content
     */
    SellerAdminApi.prototype.sellerAdminPost = function (params, options) {
        return exports.SellerAdminApiFp.sellerAdminPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param content
     * @param sellerId
     */
    SellerAdminApi.prototype.sellerAdminPut = function (params, options) {
        return exports.SellerAdminApiFp.sellerAdminPut(params, options)(this.fetch, this.basePath);
    };
    return SellerAdminApi;
}(BaseAPI));
exports.SellerAdminApi = SellerAdminApi;
;
/**
 * SellerAdminApi - factory interface
 */
exports.SellerAdminApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param sellerId
         */
        sellerAdminDelete: function (params, options) {
            return exports.SellerAdminApiFp.sellerAdminDelete(params, options)(fetch, basePath);
        },
        /**
         */
        sellerAdminGet: function (options) {
            return exports.SellerAdminApiFp.sellerAdminGet(options)(fetch, basePath);
        },
        /**
         * @param sellerId
         */
        sellerAdminGet_1: function (params, options) {
            return exports.SellerAdminApiFp.sellerAdminGet_1(params, options)(fetch, basePath);
        },
        /**
         * @param content
         */
        sellerAdminPost: function (params, options) {
            return exports.SellerAdminApiFp.sellerAdminPost(params, options)(fetch, basePath);
        },
        /**
         * @param content
         * @param sellerId
         */
        sellerAdminPut: function (params, options) {
            return exports.SellerAdminApiFp.sellerAdminPut(params, options)(fetch, basePath);
        },
    };
};
/**
 * SessionApi - fetch parameter creator
 */
exports.SessionApiFetchParamCreator = {
    /**
     * @param sessionId
     */
    sessionCartGet: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionCartGet");
        }
        var baseUrl = "/api/session/{sessionId}/cart"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param item
     */
    sessionCartPut: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionCartPut");
        }
        // verify required parameter "item" is set
        if (params["item"] == null) {
            throw new Error("Missing required parameter item when calling sessionCartPut");
        }
        var baseUrl = "/api/session/{sessionId}/cart"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["item"]) {
            fetchOptions.body = JSON.stringify(params["item"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Generates a new session id
     */
    sessionGet: function (options) {
        var baseUrl = "/api/session";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionGiftList: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionGiftList");
        }
        var baseUrl = "/api/session/{sessionId}/gc/list"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserCreditDetail: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserCreditDetail");
        }
        var baseUrl = "/api/session/{sessionId}/user-credit"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the session user detail.
     * @param sessionId Session identifier.
     */
    sessionGetSessionUserDetail: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserDetail");
        }
        var baseUrl = "/api/session/{sessionId}/user-detail"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserEmailPreferences: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserEmailPreferences");
        }
        var baseUrl = "/api/session/{sessionId}/user-email-preferences"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the list of en-route bottles that are overdue for the current user. You can then redeem any of these  bottles for credit by calling Routes.SessionUserEnRouteBottleRedeem
     * @param sessionId Session identifier.
     */
    sessionGetSessionUserEnRouteBottleList: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserEnRouteBottleList");
        }
        var baseUrl = "/api/session/{sessionId}/enroute/list"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param manifestGuid
     */
    sessionGetSessionUserEnRouteBottleRedeem: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserEnRouteBottleRedeem");
        }
        // verify required parameter "manifestGuid" is set
        if (params["manifestGuid"] == null) {
            throw new Error("Missing required parameter manifestGuid when calling sessionGetSessionUserEnRouteBottleRedeem");
        }
        var baseUrl = "/api/session/{sessionId}/enroute/redeem"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "manifestGuid": params["manifestGuid"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserOrders: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserOrders");
        }
        var baseUrl = "/api/session/{sessionId}/user-orders"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserReferral: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGetSessionUserReferral");
        }
        var baseUrl = "/api/session/{sessionId}/user-referral"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get the session with the specified id.
     * @param sessionId Session identifier.
     */
    sessionGet_1: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionGet_1");
        }
        var baseUrl = "/api/session/{sessionId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param model
     */
    sessionHandleEnrollApplePush: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionHandleEnrollApplePush");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling sessionHandleEnrollApplePush");
        }
        var baseUrl = "/api/session/{sessionId}/apn"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param modelDeviceToken
     * @param modelDeviceUuid
     * @param modelEntryPoint
     */
    sessionHandleGetApplePush: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionHandleGetApplePush");
        }
        var baseUrl = "/api/session/{sessionId}/apn"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "model.deviceToken": params["modelDeviceToken"],
            "model.deviceUuid": params["modelDeviceUuid"],
            "model.entryPoint": params["modelEntryPoint"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param claimCode
     */
    sessionHandleSessionGiftRedeem: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionHandleSessionGiftRedeem");
        }
        // verify required parameter "claimCode" is set
        if (params["claimCode"] == null) {
            throw new Error("Missing required parameter claimCode when calling sessionHandleSessionGiftRedeem");
        }
        var baseUrl = "/api/session/{sessionId}/gc/redeem"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "claimCode": params["claimCode"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param file
     */
    sessionPostSessionUploadImage: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionPostSessionUploadImage");
        }
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling sessionPostSessionUploadImage");
        }
        var baseUrl = "/api/session/{sessionId}/user-image"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "file": params["file"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Store the session with the specified id.
     * @param sessionId Session identifier.
     * @param data Data.
     */
    sessionPut: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionPut");
        }
        // verify required parameter "data" is set
        if (params["data"] == null) {
            throw new Error("Missing required parameter data when calling sessionPut");
        }
        var baseUrl = "/api/session/{sessionId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["data"]) {
            fetchOptions.body = JSON.stringify(params["data"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Puts the session user detail.
     * @param sessionId Session identifier.
     * @param model Model.
     */
    sessionPutSessionUserDetail: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionPutSessionUserDetail");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling sessionPutSessionUserDetail");
        }
        var baseUrl = "/api/session/{sessionId}/user-detail"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param manifestGuid
     */
    sessionPutSessionUserEnRouteBottleRedeem: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionPutSessionUserEnRouteBottleRedeem");
        }
        // verify required parameter "manifestGuid" is set
        if (params["manifestGuid"] == null) {
            throw new Error("Missing required parameter manifestGuid when calling sessionPutSessionUserEnRouteBottleRedeem");
        }
        var baseUrl = "/api/session/{sessionId}/enroute/redeem"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "manifestGuid": params["manifestGuid"],
        });
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Delete the session with the specified id, along with any other sessions which have expired.
     * @param sessionId Session identifier.
     */
    sessionSessionDelete: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionSessionDelete");
        }
        var baseUrl = "/api/session/{sessionId}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Delete the session with the specified id, along with any other sessions which have expired.
     * @param sessionId Session identifier.
     */
    sessionSessionSignOut: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling sessionSessionSignOut");
        }
        var baseUrl = "/api/session/{sessionId}/signout"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SessionApi - functional programming interface
 */
exports.SessionApiFp = {
    /**
     * @param sessionId
     */
    sessionCartGet: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionCartGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param item
     */
    sessionCartPut: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionCartPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Generates a new session id
     */
    sessionGet: function (options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionGiftList: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionGiftList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserCreditDetail: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserCreditDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the session user detail.
     * @param sessionId Session identifier.
     */
    sessionGetSessionUserDetail: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserEmailPreferences: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserEmailPreferences(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the list of en-route bottles that are overdue for the current user. You can then redeem any of these  bottles for credit by calling Routes.SessionUserEnRouteBottleRedeem
     * @param sessionId Session identifier.
     */
    sessionGetSessionUserEnRouteBottleList: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserEnRouteBottleList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param manifestGuid
     */
    sessionGetSessionUserEnRouteBottleRedeem: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserEnRouteBottleRedeem(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserOrders: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserOrders(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    sessionGetSessionUserReferral: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGetSessionUserReferral(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get the session with the specified id.
     * @param sessionId Session identifier.
     */
    sessionGet_1: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionGet_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param model
     */
    sessionHandleEnrollApplePush: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionHandleEnrollApplePush(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param modelDeviceToken
     * @param modelDeviceUuid
     * @param modelEntryPoint
     */
    sessionHandleGetApplePush: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionHandleGetApplePush(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param claimCode
     */
    sessionHandleSessionGiftRedeem: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionHandleSessionGiftRedeem(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param file
     */
    sessionPostSessionUploadImage: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionPostSessionUploadImage(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Store the session with the specified id.
     * @param sessionId Session identifier.
     * @param data Data.
     */
    sessionPut: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Puts the session user detail.
     * @param sessionId Session identifier.
     * @param model Model.
     */
    sessionPutSessionUserDetail: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionPutSessionUserDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param manifestGuid
     */
    sessionPutSessionUserEnRouteBottleRedeem: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionPutSessionUserEnRouteBottleRedeem(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Delete the session with the specified id, along with any other sessions which have expired.
     * @param sessionId Session identifier.
     */
    sessionSessionDelete: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionSessionDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Delete the session with the specified id, along with any other sessions which have expired.
     * @param sessionId Session identifier.
     */
    sessionSessionSignOut: function (params, options) {
        var fetchArgs = exports.SessionApiFetchParamCreator.sessionSessionSignOut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * SessionApi - object-oriented interface
 */
var SessionApi = (function (_super) {
    __extends(SessionApi, _super);
    function SessionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param sessionId
     */
    SessionApi.prototype.sessionCartGet = function (params, options) {
        return exports.SessionApiFp.sessionCartGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param item
     */
    SessionApi.prototype.sessionCartPut = function (params, options) {
        return exports.SessionApiFp.sessionCartPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * Generates a new session id
     */
    SessionApi.prototype.sessionGet = function (options) {
        return exports.SessionApiFp.sessionGet(options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    SessionApi.prototype.sessionGetSessionGiftList = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionGiftList(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    SessionApi.prototype.sessionGetSessionUserCreditDetail = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserCreditDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the session user detail.
     * @param sessionId Session identifier.
     */
    SessionApi.prototype.sessionGetSessionUserDetail = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    SessionApi.prototype.sessionGetSessionUserEmailPreferences = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserEmailPreferences(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the list of en-route bottles that are overdue for the current user. You can then redeem any of these  bottles for credit by calling Routes.SessionUserEnRouteBottleRedeem
     * @param sessionId Session identifier.
     */
    SessionApi.prototype.sessionGetSessionUserEnRouteBottleList = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserEnRouteBottleList(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param manifestGuid
     */
    SessionApi.prototype.sessionGetSessionUserEnRouteBottleRedeem = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserEnRouteBottleRedeem(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    SessionApi.prototype.sessionGetSessionUserOrders = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserOrders(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    SessionApi.prototype.sessionGetSessionUserReferral = function (params, options) {
        return exports.SessionApiFp.sessionGetSessionUserReferral(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get the session with the specified id.
     * @param sessionId Session identifier.
     */
    SessionApi.prototype.sessionGet_1 = function (params, options) {
        return exports.SessionApiFp.sessionGet_1(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param model
     */
    SessionApi.prototype.sessionHandleEnrollApplePush = function (params, options) {
        return exports.SessionApiFp.sessionHandleEnrollApplePush(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param modelDeviceToken
     * @param modelDeviceUuid
     * @param modelEntryPoint
     */
    SessionApi.prototype.sessionHandleGetApplePush = function (params, options) {
        return exports.SessionApiFp.sessionHandleGetApplePush(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param claimCode
     */
    SessionApi.prototype.sessionHandleSessionGiftRedeem = function (params, options) {
        return exports.SessionApiFp.sessionHandleSessionGiftRedeem(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param file
     */
    SessionApi.prototype.sessionPostSessionUploadImage = function (params, options) {
        return exports.SessionApiFp.sessionPostSessionUploadImage(params, options)(this.fetch, this.basePath);
    };
    /**
     * Store the session with the specified id.
     * @param sessionId Session identifier.
     * @param data Data.
     */
    SessionApi.prototype.sessionPut = function (params, options) {
        return exports.SessionApiFp.sessionPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * Puts the session user detail.
     * @param sessionId Session identifier.
     * @param model Model.
     */
    SessionApi.prototype.sessionPutSessionUserDetail = function (params, options) {
        return exports.SessionApiFp.sessionPutSessionUserDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param manifestGuid
     */
    SessionApi.prototype.sessionPutSessionUserEnRouteBottleRedeem = function (params, options) {
        return exports.SessionApiFp.sessionPutSessionUserEnRouteBottleRedeem(params, options)(this.fetch, this.basePath);
    };
    /**
     * Delete the session with the specified id, along with any other sessions which have expired.
     * @param sessionId Session identifier.
     */
    SessionApi.prototype.sessionSessionDelete = function (params, options) {
        return exports.SessionApiFp.sessionSessionDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * Delete the session with the specified id, along with any other sessions which have expired.
     * @param sessionId Session identifier.
     */
    SessionApi.prototype.sessionSessionSignOut = function (params, options) {
        return exports.SessionApiFp.sessionSessionSignOut(params, options)(this.fetch, this.basePath);
    };
    return SessionApi;
}(BaseAPI));
exports.SessionApi = SessionApi;
;
/**
 * SessionApi - factory interface
 */
exports.SessionApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param sessionId
         */
        sessionCartGet: function (params, options) {
            return exports.SessionApiFp.sessionCartGet(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param item
         */
        sessionCartPut: function (params, options) {
            return exports.SessionApiFp.sessionCartPut(params, options)(fetch, basePath);
        },
        /**
         * Generates a new session id
         */
        sessionGet: function (options) {
            return exports.SessionApiFp.sessionGet(options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        sessionGetSessionGiftList: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionGiftList(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        sessionGetSessionUserCreditDetail: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserCreditDetail(params, options)(fetch, basePath);
        },
        /**
         * Gets the session user detail.
         * @param sessionId Session identifier.
         */
        sessionGetSessionUserDetail: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserDetail(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        sessionGetSessionUserEmailPreferences: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserEmailPreferences(params, options)(fetch, basePath);
        },
        /**
         * Gets the list of en-route bottles that are overdue for the current user. You can then redeem any of these  bottles for credit by calling Routes.SessionUserEnRouteBottleRedeem
         * @param sessionId Session identifier.
         */
        sessionGetSessionUserEnRouteBottleList: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserEnRouteBottleList(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param manifestGuid
         */
        sessionGetSessionUserEnRouteBottleRedeem: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserEnRouteBottleRedeem(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        sessionGetSessionUserOrders: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserOrders(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        sessionGetSessionUserReferral: function (params, options) {
            return exports.SessionApiFp.sessionGetSessionUserReferral(params, options)(fetch, basePath);
        },
        /**
         * Get the session with the specified id.
         * @param sessionId Session identifier.
         */
        sessionGet_1: function (params, options) {
            return exports.SessionApiFp.sessionGet_1(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param model
         */
        sessionHandleEnrollApplePush: function (params, options) {
            return exports.SessionApiFp.sessionHandleEnrollApplePush(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param modelDeviceToken
         * @param modelDeviceUuid
         * @param modelEntryPoint
         */
        sessionHandleGetApplePush: function (params, options) {
            return exports.SessionApiFp.sessionHandleGetApplePush(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param claimCode
         */
        sessionHandleSessionGiftRedeem: function (params, options) {
            return exports.SessionApiFp.sessionHandleSessionGiftRedeem(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param file
         */
        sessionPostSessionUploadImage: function (params, options) {
            return exports.SessionApiFp.sessionPostSessionUploadImage(params, options)(fetch, basePath);
        },
        /**
         * Store the session with the specified id.
         * @param sessionId Session identifier.
         * @param data Data.
         */
        sessionPut: function (params, options) {
            return exports.SessionApiFp.sessionPut(params, options)(fetch, basePath);
        },
        /**
         * Puts the session user detail.
         * @param sessionId Session identifier.
         * @param model Model.
         */
        sessionPutSessionUserDetail: function (params, options) {
            return exports.SessionApiFp.sessionPutSessionUserDetail(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param manifestGuid
         */
        sessionPutSessionUserEnRouteBottleRedeem: function (params, options) {
            return exports.SessionApiFp.sessionPutSessionUserEnRouteBottleRedeem(params, options)(fetch, basePath);
        },
        /**
         * Delete the session with the specified id, along with any other sessions which have expired.
         * @param sessionId Session identifier.
         */
        sessionSessionDelete: function (params, options) {
            return exports.SessionApiFp.sessionSessionDelete(params, options)(fetch, basePath);
        },
        /**
         * Delete the session with the specified id, along with any other sessions which have expired.
         * @param sessionId Session identifier.
         */
        sessionSessionSignOut: function (params, options) {
            return exports.SessionApiFp.sessionSessionSignOut(params, options)(fetch, basePath);
        },
    };
};
/**
 * ShipManagerApi - fetch parameter creator
 */
exports.ShipManagerApiFetchParamCreator = {
    /**
     * @param id
     */
    shipManagerCancelShipment: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling shipManagerCancelShipment");
        }
        var baseUrl = "/api/admin/shipment/cancel/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param search
     * @param skip
     * @param take
     * @param isAdminHold
     */
    shipManagerGet: function (params, options) {
        // verify required parameter "search" is set
        if (params["search"] == null) {
            throw new Error("Missing required parameter search when calling shipManagerGet");
        }
        // verify required parameter "skip" is set
        if (params["skip"] == null) {
            throw new Error("Missing required parameter skip when calling shipManagerGet");
        }
        var baseUrl = "/api/admin/shipment/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "search": params["search"],
            "skip": params["skip"],
            "take": params["take"],
            "isAdminHold": params["isAdminHold"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param page
     */
    shipManagerGetCustomer: function (params, options) {
        var baseUrl = "/api/cpl/customer";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "page": params["page"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    shipManagerPostManifestsByIdShip: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling shipManagerPostManifestsByIdShip");
        }
        var baseUrl = "/api/admin/manifests/ship";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    shipManagerUpdateTracking: function (options) {
        var baseUrl = "/api/admin/shipment/updateTracking";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ShipManagerApi - functional programming interface
 */
exports.ShipManagerApiFp = {
    /**
     * @param id
     */
    shipManagerCancelShipment: function (params, options) {
        var fetchArgs = exports.ShipManagerApiFetchParamCreator.shipManagerCancelShipment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param search
     * @param skip
     * @param take
     * @param isAdminHold
     */
    shipManagerGet: function (params, options) {
        var fetchArgs = exports.ShipManagerApiFetchParamCreator.shipManagerGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param page
     */
    shipManagerGetCustomer: function (params, options) {
        var fetchArgs = exports.ShipManagerApiFetchParamCreator.shipManagerGetCustomer(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    shipManagerPostManifestsByIdShip: function (params, options) {
        var fetchArgs = exports.ShipManagerApiFetchParamCreator.shipManagerPostManifestsByIdShip(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    shipManagerUpdateTracking: function (options) {
        var fetchArgs = exports.ShipManagerApiFetchParamCreator.shipManagerUpdateTracking(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ShipManagerApi - object-oriented interface
 */
var ShipManagerApi = (function (_super) {
    __extends(ShipManagerApi, _super);
    function ShipManagerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param id
     */
    ShipManagerApi.prototype.shipManagerCancelShipment = function (params, options) {
        return exports.ShipManagerApiFp.shipManagerCancelShipment(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param search
     * @param skip
     * @param take
     * @param isAdminHold
     */
    ShipManagerApi.prototype.shipManagerGet = function (params, options) {
        return exports.ShipManagerApiFp.shipManagerGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param page
     */
    ShipManagerApi.prototype.shipManagerGetCustomer = function (params, options) {
        return exports.ShipManagerApiFp.shipManagerGetCustomer(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    ShipManagerApi.prototype.shipManagerPostManifestsByIdShip = function (params, options) {
        return exports.ShipManagerApiFp.shipManagerPostManifestsByIdShip(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    ShipManagerApi.prototype.shipManagerUpdateTracking = function (options) {
        return exports.ShipManagerApiFp.shipManagerUpdateTracking(options)(this.fetch, this.basePath);
    };
    return ShipManagerApi;
}(BaseAPI));
exports.ShipManagerApi = ShipManagerApi;
;
/**
 * ShipManagerApi - factory interface
 */
exports.ShipManagerApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param id
         */
        shipManagerCancelShipment: function (params, options) {
            return exports.ShipManagerApiFp.shipManagerCancelShipment(params, options)(fetch, basePath);
        },
        /**
         * @param search
         * @param skip
         * @param take
         * @param isAdminHold
         */
        shipManagerGet: function (params, options) {
            return exports.ShipManagerApiFp.shipManagerGet(params, options)(fetch, basePath);
        },
        /**
         * @param page
         */
        shipManagerGetCustomer: function (params, options) {
            return exports.ShipManagerApiFp.shipManagerGetCustomer(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        shipManagerPostManifestsByIdShip: function (params, options) {
            return exports.ShipManagerApiFp.shipManagerPostManifestsByIdShip(params, options)(fetch, basePath);
        },
        /**
         */
        shipManagerUpdateTracking: function (options) {
            return exports.ShipManagerApiFp.shipManagerUpdateTracking(options)(fetch, basePath);
        },
    };
};
/**
 * SkuApi - fetch parameter creator
 */
exports.SkuApiFetchParamCreator = {
    /**
     * @param sku
     * @param skuId
     */
    skuDelete: function (params, options) {
        // verify required parameter "sku" is set
        if (params["sku"] == null) {
            throw new Error("Missing required parameter sku when calling skuDelete");
        }
        // verify required parameter "skuId" is set
        if (params["skuId"] == null) {
            throw new Error("Missing required parameter skuId when calling skuDelete");
        }
        var baseUrl = "/api/v2/admin/sku/byId/{skuId}"
            .replace("{" + "skuId" + "}", "" + params["skuId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "sku": params["sku"],
        });
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     * @param sort
     * @param reverse
     */
    skuGetSkuList: function (params, options) {
        var baseUrl = "/api/v2/admin/sku";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "search": params["search"],
            "sort": params["sort"],
            "reverse": params["reverse"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     */
    skuGetSkuListDeficit: function (params, options) {
        var baseUrl = "/api/v2/admin/sku/deficit";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    skuGetSkuListFreeLocations: function (options) {
        var baseUrl = "/api/v2/admin/sku/freeLocations";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sku
     */
    skuGetSkuStats: function (params, options) {
        // verify required parameter "sku" is set
        if (params["sku"] == null) {
            throw new Error("Missing required parameter sku when calling skuGetSkuStats");
        }
        var baseUrl = "/api/v2/admin/sku/stats/forSku/{sku}"
            .replace("{" + "sku" + "}", "" + params["sku"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    skuGetSkuStatsByVarietal: function (options) {
        var baseUrl = "/api/v2/admin/sku/stats/byVarietal";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    skuListCplIds: function (options) {
        var baseUrl = "/api/v2/admin/sku/cplid";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param content
     */
    skuPost: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling skuPost");
        }
        var baseUrl = "/api/v2/admin/sku/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sku
     */
    skuPushSkuToCpl: function (params, options) {
        // verify required parameter "sku" is set
        if (params["sku"] == null) {
            throw new Error("Missing required parameter sku when calling skuPushSkuToCpl");
        }
        var baseUrl = "/api/v2/admin/sku/push/{sku}"
            .replace("{" + "sku" + "}", "" + params["sku"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skuId
     * @param content
     */
    skuPut: function (params, options) {
        // verify required parameter "skuId" is set
        if (params["skuId"] == null) {
            throw new Error("Missing required parameter skuId when calling skuPut");
        }
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling skuPut");
        }
        var baseUrl = "/api/v2/admin/sku/byId/{skuId}"
            .replace("{" + "skuId" + "}", "" + params["skuId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skip
     * @param take
     */
    skuRebuildSkuHistory: function (params, options) {
        var baseUrl = "/api/v2/admin/sku/rebuildSkuHistory";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skuId
     */
    skuSkuDetail: function (params, options) {
        // verify required parameter "skuId" is set
        if (params["skuId"] == null) {
            throw new Error("Missing required parameter skuId when calling skuSkuDetail");
        }
        var baseUrl = "/api/v2/admin/sku/byId/{skuId}"
            .replace("{" + "skuId" + "}", "" + params["skuId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skuId
     */
    skuSkuDetailV3: function (params, options) {
        // verify required parameter "skuId" is set
        if (params["skuId"] == null) {
            throw new Error("Missing required parameter skuId when calling skuSkuDetailV3");
        }
        var baseUrl = "/api/v3/admin/sku/byId/{skuId}"
            .replace("{" + "skuId" + "}", "" + params["skuId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param itemDetailSef
     */
    skuSkuListByItemDetail: function (params, options) {
        // verify required parameter "itemDetailSef" is set
        if (params["itemDetailSef"] == null) {
            throw new Error("Missing required parameter itemDetailSef when calling skuSkuListByItemDetail");
        }
        var baseUrl = "/api/v2/sku/byItemDetail/{itemDetailSef}"
            .replace("{" + "itemDetailSef" + "}", "" + params["itemDetailSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    skuSkuSwapGet: function (options) {
        var baseUrl = "/api/v2/admin/sku/swap";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    skuSkuSwapPost: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling skuSkuSwapPost");
        }
        var baseUrl = "/api/v2/admin/sku/swap";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    skuSkuSwapPut: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling skuSkuSwapPut");
        }
        var baseUrl = "/api/v2/admin/sku/swap";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SkuApi - functional programming interface
 */
exports.SkuApiFp = {
    /**
     * @param sku
     * @param skuId
     */
    skuDelete: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     * @param sort
     * @param reverse
     */
    skuGetSkuList: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuGetSkuList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     */
    skuGetSkuListDeficit: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuGetSkuListDeficit(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    skuGetSkuListFreeLocations: function (options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuGetSkuListFreeLocations(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sku
     */
    skuGetSkuStats: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuGetSkuStats(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    skuGetSkuStatsByVarietal: function (options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuGetSkuStatsByVarietal(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    skuListCplIds: function (options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuListCplIds(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param content
     */
    skuPost: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sku
     */
    skuPushSkuToCpl: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuPushSkuToCpl(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skuId
     * @param content
     */
    skuPut: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skip
     * @param take
     */
    skuRebuildSkuHistory: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuRebuildSkuHistory(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skuId
     */
    skuSkuDetail: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuSkuDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skuId
     */
    skuSkuDetailV3: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuSkuDetailV3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param itemDetailSef
     */
    skuSkuListByItemDetail: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuSkuListByItemDetail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    skuSkuSwapGet: function (options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuSkuSwapGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    skuSkuSwapPost: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuSkuSwapPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    skuSkuSwapPut: function (params, options) {
        var fetchArgs = exports.SkuApiFetchParamCreator.skuSkuSwapPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * SkuApi - object-oriented interface
 */
var SkuApi = (function (_super) {
    __extends(SkuApi, _super);
    function SkuApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param sku
     * @param skuId
     */
    SkuApi.prototype.skuDelete = function (params, options) {
        return exports.SkuApiFp.skuDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skip
     * @param take
     * @param search
     * @param sort
     * @param reverse
     */
    SkuApi.prototype.skuGetSkuList = function (params, options) {
        return exports.SkuApiFp.skuGetSkuList(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skip
     * @param take
     * @param search
     */
    SkuApi.prototype.skuGetSkuListDeficit = function (params, options) {
        return exports.SkuApiFp.skuGetSkuListDeficit(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    SkuApi.prototype.skuGetSkuListFreeLocations = function (options) {
        return exports.SkuApiFp.skuGetSkuListFreeLocations(options)(this.fetch, this.basePath);
    };
    /**
     * @param sku
     */
    SkuApi.prototype.skuGetSkuStats = function (params, options) {
        return exports.SkuApiFp.skuGetSkuStats(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    SkuApi.prototype.skuGetSkuStatsByVarietal = function (options) {
        return exports.SkuApiFp.skuGetSkuStatsByVarietal(options)(this.fetch, this.basePath);
    };
    /**
     */
    SkuApi.prototype.skuListCplIds = function (options) {
        return exports.SkuApiFp.skuListCplIds(options)(this.fetch, this.basePath);
    };
    /**
     * @param content
     */
    SkuApi.prototype.skuPost = function (params, options) {
        return exports.SkuApiFp.skuPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sku
     */
    SkuApi.prototype.skuPushSkuToCpl = function (params, options) {
        return exports.SkuApiFp.skuPushSkuToCpl(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skuId
     * @param content
     */
    SkuApi.prototype.skuPut = function (params, options) {
        return exports.SkuApiFp.skuPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skip
     * @param take
     */
    SkuApi.prototype.skuRebuildSkuHistory = function (params, options) {
        return exports.SkuApiFp.skuRebuildSkuHistory(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skuId
     */
    SkuApi.prototype.skuSkuDetail = function (params, options) {
        return exports.SkuApiFp.skuSkuDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skuId
     */
    SkuApi.prototype.skuSkuDetailV3 = function (params, options) {
        return exports.SkuApiFp.skuSkuDetailV3(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param itemDetailSef
     */
    SkuApi.prototype.skuSkuListByItemDetail = function (params, options) {
        return exports.SkuApiFp.skuSkuListByItemDetail(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    SkuApi.prototype.skuSkuSwapGet = function (options) {
        return exports.SkuApiFp.skuSkuSwapGet(options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    SkuApi.prototype.skuSkuSwapPost = function (params, options) {
        return exports.SkuApiFp.skuSkuSwapPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    SkuApi.prototype.skuSkuSwapPut = function (params, options) {
        return exports.SkuApiFp.skuSkuSwapPut(params, options)(this.fetch, this.basePath);
    };
    return SkuApi;
}(BaseAPI));
exports.SkuApi = SkuApi;
;
/**
 * SkuApi - factory interface
 */
exports.SkuApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param sku
         * @param skuId
         */
        skuDelete: function (params, options) {
            return exports.SkuApiFp.skuDelete(params, options)(fetch, basePath);
        },
        /**
         * @param skip
         * @param take
         * @param search
         * @param sort
         * @param reverse
         */
        skuGetSkuList: function (params, options) {
            return exports.SkuApiFp.skuGetSkuList(params, options)(fetch, basePath);
        },
        /**
         * @param skip
         * @param take
         * @param search
         */
        skuGetSkuListDeficit: function (params, options) {
            return exports.SkuApiFp.skuGetSkuListDeficit(params, options)(fetch, basePath);
        },
        /**
         */
        skuGetSkuListFreeLocations: function (options) {
            return exports.SkuApiFp.skuGetSkuListFreeLocations(options)(fetch, basePath);
        },
        /**
         * @param sku
         */
        skuGetSkuStats: function (params, options) {
            return exports.SkuApiFp.skuGetSkuStats(params, options)(fetch, basePath);
        },
        /**
         */
        skuGetSkuStatsByVarietal: function (options) {
            return exports.SkuApiFp.skuGetSkuStatsByVarietal(options)(fetch, basePath);
        },
        /**
         */
        skuListCplIds: function (options) {
            return exports.SkuApiFp.skuListCplIds(options)(fetch, basePath);
        },
        /**
         * @param content
         */
        skuPost: function (params, options) {
            return exports.SkuApiFp.skuPost(params, options)(fetch, basePath);
        },
        /**
         * @param sku
         */
        skuPushSkuToCpl: function (params, options) {
            return exports.SkuApiFp.skuPushSkuToCpl(params, options)(fetch, basePath);
        },
        /**
         * @param skuId
         * @param content
         */
        skuPut: function (params, options) {
            return exports.SkuApiFp.skuPut(params, options)(fetch, basePath);
        },
        /**
         * @param skip
         * @param take
         */
        skuRebuildSkuHistory: function (params, options) {
            return exports.SkuApiFp.skuRebuildSkuHistory(params, options)(fetch, basePath);
        },
        /**
         * @param skuId
         */
        skuSkuDetail: function (params, options) {
            return exports.SkuApiFp.skuSkuDetail(params, options)(fetch, basePath);
        },
        /**
         * @param skuId
         */
        skuSkuDetailV3: function (params, options) {
            return exports.SkuApiFp.skuSkuDetailV3(params, options)(fetch, basePath);
        },
        /**
         * @param itemDetailSef
         */
        skuSkuListByItemDetail: function (params, options) {
            return exports.SkuApiFp.skuSkuListByItemDetail(params, options)(fetch, basePath);
        },
        /**
         */
        skuSkuSwapGet: function (options) {
            return exports.SkuApiFp.skuSkuSwapGet(options)(fetch, basePath);
        },
        /**
         * @param model
         */
        skuSkuSwapPost: function (params, options) {
            return exports.SkuApiFp.skuSkuSwapPost(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        skuSkuSwapPut: function (params, options) {
            return exports.SkuApiFp.skuSkuSwapPut(params, options)(fetch, basePath);
        },
    };
};
/**
 * TelegramBotApi - fetch parameter creator
 */
exports.TelegramBotApiFetchParamCreator = {
    /**
     * @param update
     */
    telegramBotPost: function (params, options) {
        // verify required parameter "update" is set
        if (params["update"] == null) {
            throw new Error("Missing required parameter update when calling telegramBotPost");
        }
        var baseUrl = "/api/telegram";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["update"]) {
            fetchOptions.body = JSON.stringify(params["update"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * TelegramBotApi - functional programming interface
 */
exports.TelegramBotApiFp = {
    /**
     * @param update
     */
    telegramBotPost: function (params, options) {
        var fetchArgs = exports.TelegramBotApiFetchParamCreator.telegramBotPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * TelegramBotApi - object-oriented interface
 */
var TelegramBotApi = (function (_super) {
    __extends(TelegramBotApi, _super);
    function TelegramBotApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param update
     */
    TelegramBotApi.prototype.telegramBotPost = function (params, options) {
        return exports.TelegramBotApiFp.telegramBotPost(params, options)(this.fetch, this.basePath);
    };
    return TelegramBotApi;
}(BaseAPI));
exports.TelegramBotApi = TelegramBotApi;
;
/**
 * TelegramBotApi - factory interface
 */
exports.TelegramBotApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param update
         */
        telegramBotPost: function (params, options) {
            return exports.TelegramBotApiFp.telegramBotPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * TimeSeriesApi - fetch parameter creator
 */
exports.TimeSeriesApiFetchParamCreator = {
    /**
     * @param start
     * @param end
     * @param includeTestUsers
     * @param utm
     */
    timeSeriesBeginGenerateSeries: function (params, options) {
        // verify required parameter "start" is set
        if (params["start"] == null) {
            throw new Error("Missing required parameter start when calling timeSeriesBeginGenerateSeries");
        }
        // verify required parameter "end" is set
        if (params["end"] == null) {
            throw new Error("Missing required parameter end when calling timeSeriesBeginGenerateSeries");
        }
        // verify required parameter "includeTestUsers" is set
        if (params["includeTestUsers"] == null) {
            throw new Error("Missing required parameter includeTestUsers when calling timeSeriesBeginGenerateSeries");
        }
        // verify required parameter "utm" is set
        if (params["utm"] == null) {
            throw new Error("Missing required parameter utm when calling timeSeriesBeginGenerateSeries");
        }
        var baseUrl = "/api/report/timeseries/build";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "start": params["start"],
            "end": params["end"],
            "includeTestUsers": params["includeTestUsers"],
            "utm": params["utm"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    timeSeriesGetList: function (options) {
        var baseUrl = "/api/report/timeseries/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param entityGuid
     */
    timeSeriesGetSeries: function (params, options) {
        // verify required parameter "entityGuid" is set
        if (params["entityGuid"] == null) {
            throw new Error("Missing required parameter entityGuid when calling timeSeriesGetSeries");
        }
        var baseUrl = "/api/report/timeseries/view/{entityGuid}"
            .replace("{" + "entityGuid" + "}", "" + params["entityGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param entityGuid
     */
    timeSeriesGetSeriesRecords: function (params, options) {
        // verify required parameter "entityGuid" is set
        if (params["entityGuid"] == null) {
            throw new Error("Missing required parameter entityGuid when calling timeSeriesGetSeriesRecords");
        }
        var baseUrl = "/api/report/timeseries/view/{entityGuid}/records"
            .replace("{" + "entityGuid" + "}", "" + params["entityGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * TimeSeriesApi - functional programming interface
 */
exports.TimeSeriesApiFp = {
    /**
     * @param start
     * @param end
     * @param includeTestUsers
     * @param utm
     */
    timeSeriesBeginGenerateSeries: function (params, options) {
        var fetchArgs = exports.TimeSeriesApiFetchParamCreator.timeSeriesBeginGenerateSeries(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    timeSeriesGetList: function (options) {
        var fetchArgs = exports.TimeSeriesApiFetchParamCreator.timeSeriesGetList(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param entityGuid
     */
    timeSeriesGetSeries: function (params, options) {
        var fetchArgs = exports.TimeSeriesApiFetchParamCreator.timeSeriesGetSeries(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param entityGuid
     */
    timeSeriesGetSeriesRecords: function (params, options) {
        var fetchArgs = exports.TimeSeriesApiFetchParamCreator.timeSeriesGetSeriesRecords(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * TimeSeriesApi - object-oriented interface
 */
var TimeSeriesApi = (function (_super) {
    __extends(TimeSeriesApi, _super);
    function TimeSeriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param start
     * @param end
     * @param includeTestUsers
     * @param utm
     */
    TimeSeriesApi.prototype.timeSeriesBeginGenerateSeries = function (params, options) {
        return exports.TimeSeriesApiFp.timeSeriesBeginGenerateSeries(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    TimeSeriesApi.prototype.timeSeriesGetList = function (options) {
        return exports.TimeSeriesApiFp.timeSeriesGetList(options)(this.fetch, this.basePath);
    };
    /**
     * @param entityGuid
     */
    TimeSeriesApi.prototype.timeSeriesGetSeries = function (params, options) {
        return exports.TimeSeriesApiFp.timeSeriesGetSeries(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param entityGuid
     */
    TimeSeriesApi.prototype.timeSeriesGetSeriesRecords = function (params, options) {
        return exports.TimeSeriesApiFp.timeSeriesGetSeriesRecords(params, options)(this.fetch, this.basePath);
    };
    return TimeSeriesApi;
}(BaseAPI));
exports.TimeSeriesApi = TimeSeriesApi;
;
/**
 * TimeSeriesApi - factory interface
 */
exports.TimeSeriesApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param start
         * @param end
         * @param includeTestUsers
         * @param utm
         */
        timeSeriesBeginGenerateSeries: function (params, options) {
            return exports.TimeSeriesApiFp.timeSeriesBeginGenerateSeries(params, options)(fetch, basePath);
        },
        /**
         */
        timeSeriesGetList: function (options) {
            return exports.TimeSeriesApiFp.timeSeriesGetList(options)(fetch, basePath);
        },
        /**
         * @param entityGuid
         */
        timeSeriesGetSeries: function (params, options) {
            return exports.TimeSeriesApiFp.timeSeriesGetSeries(params, options)(fetch, basePath);
        },
        /**
         * @param entityGuid
         */
        timeSeriesGetSeriesRecords: function (params, options) {
            return exports.TimeSeriesApiFp.timeSeriesGetSeriesRecords(params, options)(fetch, basePath);
        },
    };
};
/**
 * UserApi - fetch parameter creator
 */
exports.UserApiFetchParamCreator = {
    /**
     * @param sessionId
     */
    userCanClaimFreeLetter: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling userCanClaimFreeLetter");
        }
        var baseUrl = "/api/session/{sessionId}/freeletter"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Change the password for the current user (based on sessionId)
     * @param sessionId
     * @param input
     */
    userChangePassword: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling userChangePassword");
        }
        // verify required parameter "input" is set
        if (params["input"] == null) {
            throw new Error("Missing required parameter input when calling userChangePassword");
        }
        var baseUrl = "/api/session/{sessionId}/user-passwd"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["input"]) {
            fetchOptions.body = JSON.stringify(params["input"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Change the password for the given user (based on userGuid); restricted to Admin only.
     * @param userGuid
     * @param input
     */
    userChangePasswordAdmin: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userChangePasswordAdmin");
        }
        // verify required parameter "input" is set
        if (params["input"] == null) {
            throw new Error("Missing required parameter input when calling userChangePasswordAdmin");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/setPassword"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["input"]) {
            fetchOptions.body = JSON.stringify(params["input"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    userClaimFreeLetter: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling userClaimFreeLetter");
        }
        var baseUrl = "/api/session/{sessionId}/freeletter"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userHttpUserCaptureEmail: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userHttpUserCaptureEmail");
        }
        var baseUrl = "/api/user/captureEmail";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Initiate a password reset operation.
     * @param input
     */
    userResetPassword: function (params, options) {
        // verify required parameter "input" is set
        if (params["input"] == null) {
            throw new Error("Missing required parameter input when calling userResetPassword");
        }
        var baseUrl = "/api/resetpassword";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["input"]) {
            fetchOptions.body = JSON.stringify(params["input"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param model
     */
    userSetEmailPreferences: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userSetEmailPreferences");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userSetEmailPreferences");
        }
        var baseUrl = "/api/v2/user/{userGuid}/email"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userSignIn: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userSignIn");
        }
        var baseUrl = "/api/user/auth";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userSignIn3: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userSignIn3");
        }
        var baseUrl = "/api/v3/user/auth";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userSignup: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userSignup");
        }
        var baseUrl = "/api/user";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userSignup3: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userSignup3");
        }
        var baseUrl = "/api/v3/user";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UserApi - functional programming interface
 */
exports.UserApiFp = {
    /**
     * @param sessionId
     */
    userCanClaimFreeLetter: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userCanClaimFreeLetter(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Change the password for the current user (based on sessionId)
     * @param sessionId
     * @param input
     */
    userChangePassword: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userChangePassword(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Change the password for the given user (based on userGuid); restricted to Admin only.
     * @param userGuid
     * @param input
     */
    userChangePasswordAdmin: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userChangePasswordAdmin(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    userClaimFreeLetter: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userClaimFreeLetter(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userHttpUserCaptureEmail: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userHttpUserCaptureEmail(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Initiate a password reset operation.
     * @param input
     */
    userResetPassword: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userResetPassword(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param model
     */
    userSetEmailPreferences: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userSetEmailPreferences(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userSignIn: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userSignIn(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userSignIn3: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userSignIn3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userSignup: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userSignup(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userSignup3: function (params, options) {
        var fetchArgs = exports.UserApiFetchParamCreator.userSignup3(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UserApi - object-oriented interface
 */
var UserApi = (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param sessionId
     */
    UserApi.prototype.userCanClaimFreeLetter = function (params, options) {
        return exports.UserApiFp.userCanClaimFreeLetter(params, options)(this.fetch, this.basePath);
    };
    /**
     * Change the password for the current user (based on sessionId)
     * @param sessionId
     * @param input
     */
    UserApi.prototype.userChangePassword = function (params, options) {
        return exports.UserApiFp.userChangePassword(params, options)(this.fetch, this.basePath);
    };
    /**
     * Change the password for the given user (based on userGuid); restricted to Admin only.
     * @param userGuid
     * @param input
     */
    UserApi.prototype.userChangePasswordAdmin = function (params, options) {
        return exports.UserApiFp.userChangePasswordAdmin(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    UserApi.prototype.userClaimFreeLetter = function (params, options) {
        return exports.UserApiFp.userClaimFreeLetter(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserApi.prototype.userHttpUserCaptureEmail = function (params, options) {
        return exports.UserApiFp.userHttpUserCaptureEmail(params, options)(this.fetch, this.basePath);
    };
    /**
     * Initiate a password reset operation.
     * @param input
     */
    UserApi.prototype.userResetPassword = function (params, options) {
        return exports.UserApiFp.userResetPassword(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param model
     */
    UserApi.prototype.userSetEmailPreferences = function (params, options) {
        return exports.UserApiFp.userSetEmailPreferences(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserApi.prototype.userSignIn = function (params, options) {
        return exports.UserApiFp.userSignIn(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserApi.prototype.userSignIn3 = function (params, options) {
        return exports.UserApiFp.userSignIn3(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserApi.prototype.userSignup = function (params, options) {
        return exports.UserApiFp.userSignup(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserApi.prototype.userSignup3 = function (params, options) {
        return exports.UserApiFp.userSignup3(params, options)(this.fetch, this.basePath);
    };
    return UserApi;
}(BaseAPI));
exports.UserApi = UserApi;
;
/**
 * UserApi - factory interface
 */
exports.UserApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param sessionId
         */
        userCanClaimFreeLetter: function (params, options) {
            return exports.UserApiFp.userCanClaimFreeLetter(params, options)(fetch, basePath);
        },
        /**
         * Change the password for the current user (based on sessionId)
         * @param sessionId
         * @param input
         */
        userChangePassword: function (params, options) {
            return exports.UserApiFp.userChangePassword(params, options)(fetch, basePath);
        },
        /**
         * Change the password for the given user (based on userGuid); restricted to Admin only.
         * @param userGuid
         * @param input
         */
        userChangePasswordAdmin: function (params, options) {
            return exports.UserApiFp.userChangePasswordAdmin(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        userClaimFreeLetter: function (params, options) {
            return exports.UserApiFp.userClaimFreeLetter(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userHttpUserCaptureEmail: function (params, options) {
            return exports.UserApiFp.userHttpUserCaptureEmail(params, options)(fetch, basePath);
        },
        /**
         * Initiate a password reset operation.
         * @param input
         */
        userResetPassword: function (params, options) {
            return exports.UserApiFp.userResetPassword(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param model
         */
        userSetEmailPreferences: function (params, options) {
            return exports.UserApiFp.userSetEmailPreferences(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userSignIn: function (params, options) {
            return exports.UserApiFp.userSignIn(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userSignIn3: function (params, options) {
            return exports.UserApiFp.userSignIn3(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userSignup: function (params, options) {
            return exports.UserApiFp.userSignup(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userSignup3: function (params, options) {
            return exports.UserApiFp.userSignup3(params, options)(fetch, basePath);
        },
    };
};
/**
 * UserAdminApi - fetch parameter creator
 */
exports.UserAdminApiFetchParamCreator = {
    /**
     * @param userGuid
     */
    userAdminAddressGet: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminAddressGet");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/addresses"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param addressGuid
     */
    userAdminAddressGetById: function (params, options) {
        // verify required parameter "addressGuid" is set
        if (params["addressGuid"] == null) {
            throw new Error("Missing required parameter addressGuid when calling userAdminAddressGetById");
        }
        var baseUrl = "/api/admin/address/byGuid/{addressGuid}"
            .replace("{" + "addressGuid" + "}", "" + params["addressGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param addressGuid
     * @param addressModel
     */
    userAdminAddressPutById: function (params, options) {
        // verify required parameter "addressGuid" is set
        if (params["addressGuid"] == null) {
            throw new Error("Missing required parameter addressGuid when calling userAdminAddressPutById");
        }
        // verify required parameter "addressModel" is set
        if (params["addressModel"] == null) {
            throw new Error("Missing required parameter addressModel when calling userAdminAddressPutById");
        }
        var baseUrl = "/api/admin/address/byGuid/{addressGuid}"
            .replace("{" + "addressGuid" + "}", "" + params["addressGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["addressModel"]) {
            fetchOptions.body = JSON.stringify(params["addressModel"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param giveLetters
     */
    userAdminAdminGetWordGame: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminAdminGetWordGame");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/wordgame"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "giveLetters": params["giveLetters"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    userAdminAdminRevokeWordGame: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminAdminRevokeWordGame");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/wordgame"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param comment
     */
    userAdminCreateAdminUserComment: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminCreateAdminUserComment");
        }
        // verify required parameter "comment" is set
        if (params["comment"] == null) {
            throw new Error("Missing required parameter comment when calling userAdminCreateAdminUserComment");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/comment"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["comment"]) {
            fetchOptions.body = JSON.stringify(params["comment"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param creditGuid
     */
    userAdminCreditDelete: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminCreditDelete");
        }
        // verify required parameter "creditGuid" is set
        if (params["creditGuid"] == null) {
            throw new Error("Missing required parameter creditGuid when calling userAdminCreditDelete");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/credits/{creditGuid}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"])
            .replace("{" + "creditGuid" + "}", "" + params["creditGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    userAdminCreditGet: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminCreditGet");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/credits"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param newCredit
     */
    userAdminCreditPost: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminCreditPost");
        }
        // verify required parameter "newCredit" is set
        if (params["newCredit"] == null) {
            throw new Error("Missing required parameter newCredit when calling userAdminCreditPost");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/credits"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["newCredit"]) {
            fetchOptions.body = JSON.stringify(params["newCredit"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param creditGuid
     * @param credit
     */
    userAdminCreditPut: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminCreditPut");
        }
        // verify required parameter "creditGuid" is set
        if (params["creditGuid"] == null) {
            throw new Error("Missing required parameter creditGuid when calling userAdminCreditPut");
        }
        // verify required parameter "credit" is set
        if (params["credit"] == null) {
            throw new Error("Missing required parameter credit when calling userAdminCreditPut");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/credits/{creditGuid}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"])
            .replace("{" + "creditGuid" + "}", "" + params["creditGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["credit"]) {
            fetchOptions.body = JSON.stringify(params["credit"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     */
    userAdminGet: function (params, options) {
        var baseUrl = "/api/admin/user/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    userAdminGetById: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminGetById");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sku
     */
    userAdminGetUsersbySku: function (params, options) {
        // verify required parameter "sku" is set
        if (params["sku"] == null) {
            throw new Error("Missing required parameter sku when calling userAdminGetUsersbySku");
        }
        var baseUrl = "/api/admin/user/bySku/{sku}"
            .replace("{" + "sku" + "}", "" + params["sku"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     * @param claimCodes
     */
    userAdminHandleAdminGiftRedeem: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminHandleAdminGiftRedeem");
        }
        // verify required parameter "claimCodes" is set
        if (params["claimCodes"] == null) {
            throw new Error("Missing required parameter claimCodes when calling userAdminHandleAdminGiftRedeem");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/redeemGc"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "claimCodes": params["claimCodes"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userAdminHandleAdminUserTicket: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userAdminHandleAdminUserTicket");
        }
        var baseUrl = "/api/admin/user/ticket";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userAdminHttpPostAdminUserPush: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userAdminHttpPostAdminUserPush");
        }
        var baseUrl = "/api/admin/user/push";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     */
    userAdminHttpPutAdminUserPush: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userAdminHttpPutAdminUserPush");
        }
        var baseUrl = "/api/admin/user/push";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    userAdminListAdminUserComment: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminListAdminUserComment");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/comment"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param oldUserGuid
     * @param newUserGuid
     */
    userAdminMergeUsers: function (params, options) {
        // verify required parameter "oldUserGuid" is set
        if (params["oldUserGuid"] == null) {
            throw new Error("Missing required parameter oldUserGuid when calling userAdminMergeUsers");
        }
        // verify required parameter "newUserGuid" is set
        if (params["newUserGuid"] == null) {
            throw new Error("Missing required parameter newUserGuid when calling userAdminMergeUsers");
        }
        var baseUrl = "/api/admin/user/merge/{oldUserGuid}/into/{newUserGuid}"
            .replace("{" + "oldUserGuid" + "}", "" + params["oldUserGuid"])
            .replace("{" + "newUserGuid" + "}", "" + params["newUserGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    userAdminPaymentsGet: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminPaymentsGet");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/payments"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param model
     * @param userGuid
     */
    userAdminPutById: function (params, options) {
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling userAdminPutById");
        }
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userAdminPutById");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UserAdminApi - functional programming interface
 */
exports.UserAdminApiFp = {
    /**
     * @param userGuid
     */
    userAdminAddressGet: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminAddressGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param addressGuid
     */
    userAdminAddressGetById: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminAddressGetById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param addressGuid
     * @param addressModel
     */
    userAdminAddressPutById: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminAddressPutById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param giveLetters
     */
    userAdminAdminGetWordGame: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminAdminGetWordGame(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    userAdminAdminRevokeWordGame: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminAdminRevokeWordGame(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param comment
     */
    userAdminCreateAdminUserComment: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminCreateAdminUserComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param creditGuid
     */
    userAdminCreditDelete: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminCreditDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    userAdminCreditGet: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminCreditGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param newCredit
     */
    userAdminCreditPost: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminCreditPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param creditGuid
     * @param credit
     */
    userAdminCreditPut: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminCreditPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param skip
     * @param take
     * @param search
     */
    userAdminGet: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    userAdminGetById: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminGetById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sku
     */
    userAdminGetUsersbySku: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminGetUsersbySku(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     * @param claimCodes
     */
    userAdminHandleAdminGiftRedeem: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminHandleAdminGiftRedeem(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userAdminHandleAdminUserTicket: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminHandleAdminUserTicket(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userAdminHttpPostAdminUserPush: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminHttpPostAdminUserPush(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     */
    userAdminHttpPutAdminUserPush: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminHttpPutAdminUserPush(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    userAdminListAdminUserComment: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminListAdminUserComment(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param oldUserGuid
     * @param newUserGuid
     */
    userAdminMergeUsers: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminMergeUsers(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    userAdminPaymentsGet: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminPaymentsGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param model
     * @param userGuid
     */
    userAdminPutById: function (params, options) {
        var fetchArgs = exports.UserAdminApiFetchParamCreator.userAdminPutById(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UserAdminApi - object-oriented interface
 */
var UserAdminApi = (function (_super) {
    __extends(UserAdminApi, _super);
    function UserAdminApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminAddressGet = function (params, options) {
        return exports.UserAdminApiFp.userAdminAddressGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param addressGuid
     */
    UserAdminApi.prototype.userAdminAddressGetById = function (params, options) {
        return exports.UserAdminApiFp.userAdminAddressGetById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param addressGuid
     * @param addressModel
     */
    UserAdminApi.prototype.userAdminAddressPutById = function (params, options) {
        return exports.UserAdminApiFp.userAdminAddressPutById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param giveLetters
     */
    UserAdminApi.prototype.userAdminAdminGetWordGame = function (params, options) {
        return exports.UserAdminApiFp.userAdminAdminGetWordGame(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminAdminRevokeWordGame = function (params, options) {
        return exports.UserAdminApiFp.userAdminAdminRevokeWordGame(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param comment
     */
    UserAdminApi.prototype.userAdminCreateAdminUserComment = function (params, options) {
        return exports.UserAdminApiFp.userAdminCreateAdminUserComment(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param creditGuid
     */
    UserAdminApi.prototype.userAdminCreditDelete = function (params, options) {
        return exports.UserAdminApiFp.userAdminCreditDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminCreditGet = function (params, options) {
        return exports.UserAdminApiFp.userAdminCreditGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param newCredit
     */
    UserAdminApi.prototype.userAdminCreditPost = function (params, options) {
        return exports.UserAdminApiFp.userAdminCreditPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param creditGuid
     * @param credit
     */
    UserAdminApi.prototype.userAdminCreditPut = function (params, options) {
        return exports.UserAdminApiFp.userAdminCreditPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param skip
     * @param take
     * @param search
     */
    UserAdminApi.prototype.userAdminGet = function (params, options) {
        return exports.UserAdminApiFp.userAdminGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminGetById = function (params, options) {
        return exports.UserAdminApiFp.userAdminGetById(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sku
     */
    UserAdminApi.prototype.userAdminGetUsersbySku = function (params, options) {
        return exports.UserAdminApiFp.userAdminGetUsersbySku(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     * @param claimCodes
     */
    UserAdminApi.prototype.userAdminHandleAdminGiftRedeem = function (params, options) {
        return exports.UserAdminApiFp.userAdminHandleAdminGiftRedeem(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserAdminApi.prototype.userAdminHandleAdminUserTicket = function (params, options) {
        return exports.UserAdminApiFp.userAdminHandleAdminUserTicket(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserAdminApi.prototype.userAdminHttpPostAdminUserPush = function (params, options) {
        return exports.UserAdminApiFp.userAdminHttpPostAdminUserPush(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     */
    UserAdminApi.prototype.userAdminHttpPutAdminUserPush = function (params, options) {
        return exports.UserAdminApiFp.userAdminHttpPutAdminUserPush(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminListAdminUserComment = function (params, options) {
        return exports.UserAdminApiFp.userAdminListAdminUserComment(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param oldUserGuid
     * @param newUserGuid
     */
    UserAdminApi.prototype.userAdminMergeUsers = function (params, options) {
        return exports.UserAdminApiFp.userAdminMergeUsers(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminPaymentsGet = function (params, options) {
        return exports.UserAdminApiFp.userAdminPaymentsGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param model
     * @param userGuid
     */
    UserAdminApi.prototype.userAdminPutById = function (params, options) {
        return exports.UserAdminApiFp.userAdminPutById(params, options)(this.fetch, this.basePath);
    };
    return UserAdminApi;
}(BaseAPI));
exports.UserAdminApi = UserAdminApi;
;
/**
 * UserAdminApi - factory interface
 */
exports.UserAdminApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param userGuid
         */
        userAdminAddressGet: function (params, options) {
            return exports.UserAdminApiFp.userAdminAddressGet(params, options)(fetch, basePath);
        },
        /**
         * @param addressGuid
         */
        userAdminAddressGetById: function (params, options) {
            return exports.UserAdminApiFp.userAdminAddressGetById(params, options)(fetch, basePath);
        },
        /**
         * @param addressGuid
         * @param addressModel
         */
        userAdminAddressPutById: function (params, options) {
            return exports.UserAdminApiFp.userAdminAddressPutById(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param giveLetters
         */
        userAdminAdminGetWordGame: function (params, options) {
            return exports.UserAdminApiFp.userAdminAdminGetWordGame(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        userAdminAdminRevokeWordGame: function (params, options) {
            return exports.UserAdminApiFp.userAdminAdminRevokeWordGame(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param comment
         */
        userAdminCreateAdminUserComment: function (params, options) {
            return exports.UserAdminApiFp.userAdminCreateAdminUserComment(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param creditGuid
         */
        userAdminCreditDelete: function (params, options) {
            return exports.UserAdminApiFp.userAdminCreditDelete(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        userAdminCreditGet: function (params, options) {
            return exports.UserAdminApiFp.userAdminCreditGet(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param newCredit
         */
        userAdminCreditPost: function (params, options) {
            return exports.UserAdminApiFp.userAdminCreditPost(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param creditGuid
         * @param credit
         */
        userAdminCreditPut: function (params, options) {
            return exports.UserAdminApiFp.userAdminCreditPut(params, options)(fetch, basePath);
        },
        /**
         * @param skip
         * @param take
         * @param search
         */
        userAdminGet: function (params, options) {
            return exports.UserAdminApiFp.userAdminGet(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        userAdminGetById: function (params, options) {
            return exports.UserAdminApiFp.userAdminGetById(params, options)(fetch, basePath);
        },
        /**
         * @param sku
         */
        userAdminGetUsersbySku: function (params, options) {
            return exports.UserAdminApiFp.userAdminGetUsersbySku(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         * @param claimCodes
         */
        userAdminHandleAdminGiftRedeem: function (params, options) {
            return exports.UserAdminApiFp.userAdminHandleAdminGiftRedeem(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userAdminHandleAdminUserTicket: function (params, options) {
            return exports.UserAdminApiFp.userAdminHandleAdminUserTicket(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userAdminHttpPostAdminUserPush: function (params, options) {
            return exports.UserAdminApiFp.userAdminHttpPostAdminUserPush(params, options)(fetch, basePath);
        },
        /**
         * @param model
         */
        userAdminHttpPutAdminUserPush: function (params, options) {
            return exports.UserAdminApiFp.userAdminHttpPutAdminUserPush(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        userAdminListAdminUserComment: function (params, options) {
            return exports.UserAdminApiFp.userAdminListAdminUserComment(params, options)(fetch, basePath);
        },
        /**
         * @param oldUserGuid
         * @param newUserGuid
         */
        userAdminMergeUsers: function (params, options) {
            return exports.UserAdminApiFp.userAdminMergeUsers(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        userAdminPaymentsGet: function (params, options) {
            return exports.UserAdminApiFp.userAdminPaymentsGet(params, options)(fetch, basePath);
        },
        /**
         * @param model
         * @param userGuid
         */
        userAdminPutById: function (params, options) {
            return exports.UserAdminApiFp.userAdminPutById(params, options)(fetch, basePath);
        },
    };
};
/**
 * UserCreditApi - fetch parameter creator
 */
exports.UserCreditApiFetchParamCreator = {
    /**
     * @param userGuid
     */
    userCreditGet: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userCreditGet");
        }
        var baseUrl = "/api/user/{userGuid}/credit"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param userGuid
     */
    userCreditGetTransactions: function (params, options) {
        // verify required parameter "userGuid" is set
        if (params["userGuid"] == null) {
            throw new Error("Missing required parameter userGuid when calling userCreditGetTransactions");
        }
        var baseUrl = "/api/admin/user/byGuid/{userGuid}/transactions/list"
            .replace("{" + "userGuid" + "}", "" + params["userGuid"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UserCreditApi - functional programming interface
 */
exports.UserCreditApiFp = {
    /**
     * @param userGuid
     */
    userCreditGet: function (params, options) {
        var fetchArgs = exports.UserCreditApiFetchParamCreator.userCreditGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param userGuid
     */
    userCreditGetTransactions: function (params, options) {
        var fetchArgs = exports.UserCreditApiFetchParamCreator.userCreditGetTransactions(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UserCreditApi - object-oriented interface
 */
var UserCreditApi = (function (_super) {
    __extends(UserCreditApi, _super);
    function UserCreditApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param userGuid
     */
    UserCreditApi.prototype.userCreditGet = function (params, options) {
        return exports.UserCreditApiFp.userCreditGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param userGuid
     */
    UserCreditApi.prototype.userCreditGetTransactions = function (params, options) {
        return exports.UserCreditApiFp.userCreditGetTransactions(params, options)(this.fetch, this.basePath);
    };
    return UserCreditApi;
}(BaseAPI));
exports.UserCreditApi = UserCreditApi;
;
/**
 * UserCreditApi - factory interface
 */
exports.UserCreditApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param userGuid
         */
        userCreditGet: function (params, options) {
            return exports.UserCreditApiFp.userCreditGet(params, options)(fetch, basePath);
        },
        /**
         * @param userGuid
         */
        userCreditGetTransactions: function (params, options) {
            return exports.UserCreditApiFp.userCreditGetTransactions(params, options)(fetch, basePath);
        },
    };
};
/**
 * V2GroupApi - fetch parameter creator
 */
exports.V2GroupApiFetchParamCreator = {
    /**
     * @param content
     */
    v2GroupDelete: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling v2GroupDelete");
        }
        var baseUrl = "/api/v2/admin/grouping";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    v2GroupGet: function (options) {
        var baseUrl = "/api/v2/admin/grouping";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    v2GroupGet_1: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling v2GroupGet_1");
        }
        var baseUrl = "/api/v2/admin/grouping/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param content
     */
    v2GroupPost: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling v2GroupPost");
        }
        var baseUrl = "/api/v2/admin/grouping";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param content
     */
    v2GroupPut: function (params, options) {
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling v2GroupPut");
        }
        var baseUrl = "/api/v2/admin/grouping";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * V2GroupApi - functional programming interface
 */
exports.V2GroupApiFp = {
    /**
     * @param content
     */
    v2GroupDelete: function (params, options) {
        var fetchArgs = exports.V2GroupApiFetchParamCreator.v2GroupDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    v2GroupGet: function (options) {
        var fetchArgs = exports.V2GroupApiFetchParamCreator.v2GroupGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    v2GroupGet_1: function (params, options) {
        var fetchArgs = exports.V2GroupApiFetchParamCreator.v2GroupGet_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param content
     */
    v2GroupPost: function (params, options) {
        var fetchArgs = exports.V2GroupApiFetchParamCreator.v2GroupPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param content
     */
    v2GroupPut: function (params, options) {
        var fetchArgs = exports.V2GroupApiFetchParamCreator.v2GroupPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * V2GroupApi - object-oriented interface
 */
var V2GroupApi = (function (_super) {
    __extends(V2GroupApi, _super);
    function V2GroupApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param content
     */
    V2GroupApi.prototype.v2GroupDelete = function (params, options) {
        return exports.V2GroupApiFp.v2GroupDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    V2GroupApi.prototype.v2GroupGet = function (options) {
        return exports.V2GroupApiFp.v2GroupGet(options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    V2GroupApi.prototype.v2GroupGet_1 = function (params, options) {
        return exports.V2GroupApiFp.v2GroupGet_1(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param content
     */
    V2GroupApi.prototype.v2GroupPost = function (params, options) {
        return exports.V2GroupApiFp.v2GroupPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param content
     */
    V2GroupApi.prototype.v2GroupPut = function (params, options) {
        return exports.V2GroupApiFp.v2GroupPut(params, options)(this.fetch, this.basePath);
    };
    return V2GroupApi;
}(BaseAPI));
exports.V2GroupApi = V2GroupApi;
;
/**
 * V2GroupApi - factory interface
 */
exports.V2GroupApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param content
         */
        v2GroupDelete: function (params, options) {
            return exports.V2GroupApiFp.v2GroupDelete(params, options)(fetch, basePath);
        },
        /**
         */
        v2GroupGet: function (options) {
            return exports.V2GroupApiFp.v2GroupGet(options)(fetch, basePath);
        },
        /**
         * @param id
         */
        v2GroupGet_1: function (params, options) {
            return exports.V2GroupApiFp.v2GroupGet_1(params, options)(fetch, basePath);
        },
        /**
         * @param content
         */
        v2GroupPost: function (params, options) {
            return exports.V2GroupApiFp.v2GroupPost(params, options)(fetch, basePath);
        },
        /**
         * @param content
         */
        v2GroupPut: function (params, options) {
            return exports.V2GroupApiFp.v2GroupPut(params, options)(fetch, basePath);
        },
    };
};
/**
 * WineGeniusApi - fetch parameter creator
 */
exports.WineGeniusApiFetchParamCreator = {
    /**
     * Reveals the allocated items for an order, and finalizes the order.
     * @param sessionId
     * @param offerSef
     */
    wineGeniusDeleteSessionOfferReservation: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusDeleteSessionOfferReservation");
        }
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling wineGeniusDeleteSessionOfferReservation");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/picks/forOffer/{offerSef}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param offerSef
     */
    wineGeniusGetSessionOfferReservation: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusGetSessionOfferReservation");
        }
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling wineGeniusGetSessionOfferReservation");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/picks/forOffer/{offerSef}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    wineGeniusGetSessionWineGeniusData: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusGetSessionWineGeniusData");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/data"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     */
    wineGeniusGetWineGeniusUsersForOffer: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling wineGeniusGetWineGeniusUsersForOffer");
        }
        var baseUrl = "/api/v3/admin/genius/{offerSef}/orders"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    wineGeniusHandleGetMessages: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusHandleGetMessages");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/message"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param vacationDateSet
     * @param vacationSuspendOn
     * @param vacationResumeOn
     * @param vacationVacationGuid
     */
    wineGeniusHandleGetVacation: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusHandleGetVacation");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/vacation"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "vacation.dateSet": params["vacationDateSet"],
            "vacation.suspendOn": params["vacationSuspendOn"],
            "vacation.resumeOn": params["vacationResumeOn"],
            "vacation.vacationGuid": params["vacationVacationGuid"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param message
     */
    wineGeniusHandlePostMessage: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusHandlePostMessage");
        }
        // verify required parameter "message" is set
        if (params["message"] == null) {
            throw new Error("Missing required parameter message when calling wineGeniusHandlePostMessage");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/message"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["message"]) {
            fetchOptions.body = JSON.stringify(params["message"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param vacation
     */
    wineGeniusHandlePostVacation: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusHandlePostVacation");
        }
        // verify required parameter "vacation" is set
        if (params["vacation"] == null) {
            throw new Error("Missing required parameter vacation when calling wineGeniusHandlePostVacation");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/vacation"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["vacation"]) {
            fetchOptions.body = JSON.stringify(params["vacation"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     */
    wineGeniusListSessionOfferReservation: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusListSessionOfferReservation");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/picks/list"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param offerSef
     * @param model
     */
    wineGeniusPostWineGeniusIncludeOrExclude: function (params, options) {
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling wineGeniusPostWineGeniusIncludeOrExclude");
        }
        // verify required parameter "model" is set
        if (params["model"] == null) {
            throw new Error("Missing required parameter model when calling wineGeniusPostWineGeniusIncludeOrExclude");
        }
        var baseUrl = "/api/v3/admin/genius/{offerSef}/orders"
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["model"]) {
            fetchOptions.body = JSON.stringify(params["model"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Reveals the allocated items for an order, and finalizes the order.
     * @param sessionId
     * @param offerSef
     */
    wineGeniusPutSessionOfferReservation: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusPutSessionOfferReservation");
        }
        // verify required parameter "offerSef" is set
        if (params["offerSef"] == null) {
            throw new Error("Missing required parameter offerSef when calling wineGeniusPutSessionOfferReservation");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/picks/forOffer/{offerSef}"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"])
            .replace("{" + "offerSef" + "}", "" + params["offerSef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param data
     */
    wineGeniusSetSessionWineGeniusData: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusSetSessionWineGeniusData");
        }
        // verify required parameter "data" is set
        if (params["data"] == null) {
            throw new Error("Missing required parameter data when calling wineGeniusSetSessionWineGeniusData");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/data"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["data"]) {
            fetchOptions.body = JSON.stringify(params["data"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param sessionId
     * @param postData
     */
    wineGeniusWineGeniusPost: function (params, options) {
        // verify required parameter "sessionId" is set
        if (params["sessionId"] == null) {
            throw new Error("Missing required parameter sessionId when calling wineGeniusWineGeniusPost");
        }
        // verify required parameter "postData" is set
        if (params["postData"] == null) {
            throw new Error("Missing required parameter postData when calling wineGeniusWineGeniusPost");
        }
        var baseUrl = "/api/session/{sessionId}/winegenius/survey"
            .replace("{" + "sessionId" + "}", "" + params["sessionId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["postData"]) {
            fetchOptions.body = JSON.stringify(params["postData"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * WineGeniusApi - functional programming interface
 */
exports.WineGeniusApiFp = {
    /**
     * Reveals the allocated items for an order, and finalizes the order.
     * @param sessionId
     * @param offerSef
     */
    wineGeniusDeleteSessionOfferReservation: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusDeleteSessionOfferReservation(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param offerSef
     */
    wineGeniusGetSessionOfferReservation: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusGetSessionOfferReservation(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    wineGeniusGetSessionWineGeniusData: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusGetSessionWineGeniusData(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     */
    wineGeniusGetWineGeniusUsersForOffer: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusGetWineGeniusUsersForOffer(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    wineGeniusHandleGetMessages: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusHandleGetMessages(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param vacationDateSet
     * @param vacationSuspendOn
     * @param vacationResumeOn
     * @param vacationVacationGuid
     */
    wineGeniusHandleGetVacation: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusHandleGetVacation(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param message
     */
    wineGeniusHandlePostMessage: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusHandlePostMessage(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param vacation
     */
    wineGeniusHandlePostVacation: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusHandlePostVacation(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     */
    wineGeniusListSessionOfferReservation: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusListSessionOfferReservation(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param offerSef
     * @param model
     */
    wineGeniusPostWineGeniusIncludeOrExclude: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusPostWineGeniusIncludeOrExclude(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Reveals the allocated items for an order, and finalizes the order.
     * @param sessionId
     * @param offerSef
     */
    wineGeniusPutSessionOfferReservation: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusPutSessionOfferReservation(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param data
     */
    wineGeniusSetSessionWineGeniusData: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusSetSessionWineGeniusData(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param sessionId
     * @param postData
     */
    wineGeniusWineGeniusPost: function (params, options) {
        var fetchArgs = exports.WineGeniusApiFetchParamCreator.wineGeniusWineGeniusPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * WineGeniusApi - object-oriented interface
 */
var WineGeniusApi = (function (_super) {
    __extends(WineGeniusApi, _super);
    function WineGeniusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Reveals the allocated items for an order, and finalizes the order.
     * @param sessionId
     * @param offerSef
     */
    WineGeniusApi.prototype.wineGeniusDeleteSessionOfferReservation = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusDeleteSessionOfferReservation(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param offerSef
     */
    WineGeniusApi.prototype.wineGeniusGetSessionOfferReservation = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusGetSessionOfferReservation(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    WineGeniusApi.prototype.wineGeniusGetSessionWineGeniusData = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusGetSessionWineGeniusData(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     */
    WineGeniusApi.prototype.wineGeniusGetWineGeniusUsersForOffer = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusGetWineGeniusUsersForOffer(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    WineGeniusApi.prototype.wineGeniusHandleGetMessages = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusHandleGetMessages(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param vacationDateSet
     * @param vacationSuspendOn
     * @param vacationResumeOn
     * @param vacationVacationGuid
     */
    WineGeniusApi.prototype.wineGeniusHandleGetVacation = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusHandleGetVacation(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param message
     */
    WineGeniusApi.prototype.wineGeniusHandlePostMessage = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusHandlePostMessage(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param vacation
     */
    WineGeniusApi.prototype.wineGeniusHandlePostVacation = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusHandlePostVacation(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     */
    WineGeniusApi.prototype.wineGeniusListSessionOfferReservation = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusListSessionOfferReservation(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param offerSef
     * @param model
     */
    WineGeniusApi.prototype.wineGeniusPostWineGeniusIncludeOrExclude = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusPostWineGeniusIncludeOrExclude(params, options)(this.fetch, this.basePath);
    };
    /**
     * Reveals the allocated items for an order, and finalizes the order.
     * @param sessionId
     * @param offerSef
     */
    WineGeniusApi.prototype.wineGeniusPutSessionOfferReservation = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusPutSessionOfferReservation(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param data
     */
    WineGeniusApi.prototype.wineGeniusSetSessionWineGeniusData = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusSetSessionWineGeniusData(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param sessionId
     * @param postData
     */
    WineGeniusApi.prototype.wineGeniusWineGeniusPost = function (params, options) {
        return exports.WineGeniusApiFp.wineGeniusWineGeniusPost(params, options)(this.fetch, this.basePath);
    };
    return WineGeniusApi;
}(BaseAPI));
exports.WineGeniusApi = WineGeniusApi;
;
/**
 * WineGeniusApi - factory interface
 */
exports.WineGeniusApiFactory = function (fetch, basePath) {
    return {
        /**
         * Reveals the allocated items for an order, and finalizes the order.
         * @param sessionId
         * @param offerSef
         */
        wineGeniusDeleteSessionOfferReservation: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusDeleteSessionOfferReservation(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param offerSef
         */
        wineGeniusGetSessionOfferReservation: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusGetSessionOfferReservation(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        wineGeniusGetSessionWineGeniusData: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusGetSessionWineGeniusData(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         */
        wineGeniusGetWineGeniusUsersForOffer: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusGetWineGeniusUsersForOffer(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        wineGeniusHandleGetMessages: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusHandleGetMessages(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param vacationDateSet
         * @param vacationSuspendOn
         * @param vacationResumeOn
         * @param vacationVacationGuid
         */
        wineGeniusHandleGetVacation: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusHandleGetVacation(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param message
         */
        wineGeniusHandlePostMessage: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusHandlePostMessage(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param vacation
         */
        wineGeniusHandlePostVacation: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusHandlePostVacation(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         */
        wineGeniusListSessionOfferReservation: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusListSessionOfferReservation(params, options)(fetch, basePath);
        },
        /**
         * @param offerSef
         * @param model
         */
        wineGeniusPostWineGeniusIncludeOrExclude: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusPostWineGeniusIncludeOrExclude(params, options)(fetch, basePath);
        },
        /**
         * Reveals the allocated items for an order, and finalizes the order.
         * @param sessionId
         * @param offerSef
         */
        wineGeniusPutSessionOfferReservation: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusPutSessionOfferReservation(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param data
         */
        wineGeniusSetSessionWineGeniusData: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusSetSessionWineGeniusData(params, options)(fetch, basePath);
        },
        /**
         * @param sessionId
         * @param postData
         */
        wineGeniusWineGeniusPost: function (params, options) {
            return exports.WineGeniusApiFp.wineGeniusWineGeniusPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * WineryApi - fetch parameter creator
 */
exports.WineryApiFetchParamCreator = {
    /**
     * Gets a winery by its id.
     * @param winerySef
     */
    wineryHandleGetWinery: function (params, options) {
        // verify required parameter "winerySef" is set
        if (params["winerySef"] == null) {
            throw new Error("Missing required parameter winerySef when calling wineryHandleGetWinery");
        }
        var baseUrl = "/api/v2/winery/{winerySef}"
            .replace("{" + "winerySef" + "}", "" + params["winerySef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the list of wineries.
     * @param skip
     * @param take
     * @param filter
     * @param search
     */
    wineryHandleListWinery: function (params, options) {
        var baseUrl = "/api/v2/winery";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "skip": params["skip"],
            "take": params["take"],
            "filter": params["filter"],
            "search": params["search"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Gets the list of wines made by a winery.
     * @param winerySef
     */
    wineryHandleListWinery_1: function (params, options) {
        // verify required parameter "winerySef" is set
        if (params["winerySef"] == null) {
            throw new Error("Missing required parameter winerySef when calling wineryHandleListWinery_1");
        }
        var baseUrl = "/api/v2/winery/{winerySef}/items"
            .replace("{" + "winerySef" + "}", "" + params["winerySef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Creates a new winery.
     * @param winery
     */
    wineryHandlePostWinery: function (params, options) {
        // verify required parameter "winery" is set
        if (params["winery"] == null) {
            throw new Error("Missing required parameter winery when calling wineryHandlePostWinery");
        }
        var baseUrl = "/api/v2/winery";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["winery"]) {
            fetchOptions.body = JSON.stringify(params["winery"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Updates an existing winery.
     * @param winerySef
     * @param winery
     */
    wineryHandlePutWinery: function (params, options) {
        // verify required parameter "winerySef" is set
        if (params["winerySef"] == null) {
            throw new Error("Missing required parameter winerySef when calling wineryHandlePutWinery");
        }
        // verify required parameter "winery" is set
        if (params["winery"] == null) {
            throw new Error("Missing required parameter winery when calling wineryHandlePutWinery");
        }
        var baseUrl = "/api/v2/winery/{winerySef}"
            .replace("{" + "winerySef" + "}", "" + params["winerySef"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["winery"]) {
            fetchOptions.body = JSON.stringify(params["winery"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * WineryApi - functional programming interface
 */
exports.WineryApiFp = {
    /**
     * Gets a winery by its id.
     * @param winerySef
     */
    wineryHandleGetWinery: function (params, options) {
        var fetchArgs = exports.WineryApiFetchParamCreator.wineryHandleGetWinery(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the list of wineries.
     * @param skip
     * @param take
     * @param filter
     * @param search
     */
    wineryHandleListWinery: function (params, options) {
        var fetchArgs = exports.WineryApiFetchParamCreator.wineryHandleListWinery(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Gets the list of wines made by a winery.
     * @param winerySef
     */
    wineryHandleListWinery_1: function (params, options) {
        var fetchArgs = exports.WineryApiFetchParamCreator.wineryHandleListWinery_1(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Creates a new winery.
     * @param winery
     */
    wineryHandlePostWinery: function (params, options) {
        var fetchArgs = exports.WineryApiFetchParamCreator.wineryHandlePostWinery(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Updates an existing winery.
     * @param winerySef
     * @param winery
     */
    wineryHandlePutWinery: function (params, options) {
        var fetchArgs = exports.WineryApiFetchParamCreator.wineryHandlePutWinery(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = exports.BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * WineryApi - object-oriented interface
 */
var WineryApi = (function (_super) {
    __extends(WineryApi, _super);
    function WineryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a winery by its id.
     * @param winerySef
     */
    WineryApi.prototype.wineryHandleGetWinery = function (params, options) {
        return exports.WineryApiFp.wineryHandleGetWinery(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the list of wineries.
     * @param skip
     * @param take
     * @param filter
     * @param search
     */
    WineryApi.prototype.wineryHandleListWinery = function (params, options) {
        return exports.WineryApiFp.wineryHandleListWinery(params, options)(this.fetch, this.basePath);
    };
    /**
     * Gets the list of wines made by a winery.
     * @param winerySef
     */
    WineryApi.prototype.wineryHandleListWinery_1 = function (params, options) {
        return exports.WineryApiFp.wineryHandleListWinery_1(params, options)(this.fetch, this.basePath);
    };
    /**
     * Creates a new winery.
     * @param winery
     */
    WineryApi.prototype.wineryHandlePostWinery = function (params, options) {
        return exports.WineryApiFp.wineryHandlePostWinery(params, options)(this.fetch, this.basePath);
    };
    /**
     * Updates an existing winery.
     * @param winerySef
     * @param winery
     */
    WineryApi.prototype.wineryHandlePutWinery = function (params, options) {
        return exports.WineryApiFp.wineryHandlePutWinery(params, options)(this.fetch, this.basePath);
    };
    return WineryApi;
}(BaseAPI));
exports.WineryApi = WineryApi;
;
/**
 * WineryApi - factory interface
 */
exports.WineryApiFactory = function (fetch, basePath) {
    return {
        /**
         * Gets a winery by its id.
         * @param winerySef
         */
        wineryHandleGetWinery: function (params, options) {
            return exports.WineryApiFp.wineryHandleGetWinery(params, options)(fetch, basePath);
        },
        /**
         * Gets the list of wineries.
         * @param skip
         * @param take
         * @param filter
         * @param search
         */
        wineryHandleListWinery: function (params, options) {
            return exports.WineryApiFp.wineryHandleListWinery(params, options)(fetch, basePath);
        },
        /**
         * Gets the list of wines made by a winery.
         * @param winerySef
         */
        wineryHandleListWinery_1: function (params, options) {
            return exports.WineryApiFp.wineryHandleListWinery_1(params, options)(fetch, basePath);
        },
        /**
         * Creates a new winery.
         * @param winery
         */
        wineryHandlePostWinery: function (params, options) {
            return exports.WineryApiFp.wineryHandlePostWinery(params, options)(fetch, basePath);
        },
        /**
         * Updates an existing winery.
         * @param winerySef
         * @param winery
         */
        wineryHandlePutWinery: function (params, options) {
            return exports.WineryApiFp.wineryHandlePutWinery(params, options)(fetch, basePath);
        },
    };
};
//# sourceMappingURL=api.js.map